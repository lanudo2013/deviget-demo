{"version":3,"sources":["classes/enums/post-type.ts","components/post-detail/PostDetail.tsx","services/PostDBService.ts","classes/response.ts","constants.ts","services/PostHttpService.ts","services/PostService.ts","state/actions.ts","components/post/PostUI.tsx","components/util.ts","components/post-list/PostList.tsx","App.tsx","reportWebVitals.js","state/rootReducer.ts","index.js"],"names":["PostType","fromPostType","val","post_hint","toLowerCase","IMAGE","VIDEO","CONTENT_EMBED","SELF","LINK","selftext_html","is_video","secure_media","oembed","html","PostDetail","props","post","useSelector","state","selectedPost","htmlDecode","React","useCallback","input","e","document","createElement","innerHTML","childNodes","length","nodeValue","getPostBody","vData","videoData","postType","className","style","backgroundImage","postUrl","src","url","autoPlay","muted","controls","preload","href","target","dangerouslySetInnerHTML","__html","postHtml","embedContent","body","author","maxHeight","justifyContent","fontSize","title","PostDBService","dbInstance","this","undefined","ev","resolveFunc","reject","db","result","createObjectStore","keyPath","createIndex","unique","tx","transaction","oncomplete","onerror","Promise","resolve","res","rej","dbconnect","window","indexedDB","open","onupgradeneeded","initDb","onsuccess","getDBRef","id","then","event","objectStoreRequest","objectStore","put","Error","p","jsonData","JSON","stringify","query","getAll","map","x","parse","createdTime","Date","createdTimeUtc","ids","requests","forEach","obj","push","allfinished","i","req","readyState","delete","instance","ResponseDto","data","success","message","code","Constants","REDDIT_BASE_URL","HTTP_TIMEOUT","ERRORS","TIMEOUT_CODE","REDUX_ACTIONS","FETCH_REQUEST_POSTS","UPDATE_POST_LIST","FAIL_REQUEST_POSTS","DISMISS_POST","SELECT_POST","READ_POSTS_IDS","DISMISSED_POSTS_IDS","UPDATE_CURRENT_ERROR","UPDATE_DONE_DISMISS_DATA","UPDATE_SAVED_POSTS","SHOW_SAVED_POSTS","POST_LIST_PAGE_SIZES","MOBILE_WIDHT_LIMIT_PX","APP_MESSAGES","ERROR_GET_POSTS","REFRESH_BUTTON","DISMISS_ALL_BUTTON","ERROR_TITLE","DISMISS_BUTTON","SAVE_BUTTON","REMOVE_BUTTON","SAVED_POSTS","LOADING","ERROR_DISMISS_POST","ERROR_DISMISS_POSTS","ERROR_SAVE_READ_POST","ERROR_GET_SAVED_POSTS","ERROR_SAVE_POST","PAGE_SIZE_PLC","PostHttpService","after","limit","params","race","setTimeout","fetch","filter","join","json","response","children","list","before","PostService","httpService","dbService","lastAuthorId","getInstance","reddit_video","width","height","fallback_url","endsWith","subreddit_name_prefixed","name","thumbnailUrl","isValidThumbnailUrl","thumbnail","thumbnailDims","thumbnail_width","thumbnail_height","created_utc","subreddit","url_overridden_by_dest","numberOfComments","num_comments","media","getVideoData","collected","all","getDismissedKeys","getPosts","values","dissMap","reduce","prev","curr","mapToPost","localStorage","setItem","getPostsAux","reset","getAllReadKeys","saveDismissed","getSavedPosts","savePost","saveDismissPosts","removeSavedPost","saveRead","n","getItem","parseInt","createDB","updatePostsList","type","payload","updateSavedPostsList","readPostsList","v","showSaved","selectPost","updateCurrentError","updateDoneDimissData","requestPosts","dispatch","getState","posts","concat","catch","err","failRequestPosts","retrieveDismissedPosts","getDismissedPosts","loadSavedPosts","ps","console","error","DAY_TIME","HOUR_TIME","PostUIFn","ref1","useState","pressAnimation","setPressAnimation","fadeOutAnimation","setDismissFadeOutAnimation","slideOutAnimation","setDismissSlideOutAnimation","hidden","setHidden","resolveFadeOutAnim","useRef","resolveSlideAnim","formatCreatedAt","dt","now","currentDate","diff","getTime","getTimezoneOffset","days","Math","floor","minutes","hours","hoursDiff","dismissButtonStyle","useMemo","paddingTop","paddingBottom","marginRight","useImperativeHandle","fadeOut","current","slideOut","delay","formatter","Intl","NumberFormat","pressPost","onPress","pressSave","stopPropagation","onPressSave","animEnds","pressDismiss","onPressDismiss","pressRemoved","onPressRemoved","animationClassStr","openFullSizeImage","visibility","onClick","onAnimationEnd","read","Icon","left","saved","canRemove","Button","color","size","variant","startIcon","format","PostUI","forwardRef","Util","innerWidth","innerHeight","PostList","postService","getPageSize","pageSize","setPageSize","ready","setReady","slideAnimating","setSlideAnimating","menuAnimating","setMenuAnimating","menuOpened","setMenuOpened","getWindowDimensions","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useDispatch","postsRead","initFetch","oSize","postRefsMap","getReadPosts","showSavedAction","init","savedPosts","fetchingPosts","dismissData","runDismissFadeOutAnimation","postToDismiss","runRemoveFadeOutAnimation","runSlideOutAnimation","to","promises","postRef","min","setRandom","Object","keys","saveReadPost","onScroll","debounce","scrollHeight","scrollTop","clientHeight","postsReadMap","postsSavedMap","onDismissed","saveDismissPost","setPostRef","rs","onRemoveSaved","postsEl","ref","r","handleChange","value","savePageSize","refreshPress","dismissAllPress","showSavedPress","random","onAnimSliderEnd","openMenu","pageSizes","MenuItem","IconButton","aria-label","Select","onChange","InputBase","placeholder","paddingLeft","endIcon","border","App","modalOpen","setModalOpen","currentError","handleClose","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","disableBackdropClick","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","find","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.69a04b0b.chunk.js","sourcesContent":["export enum PostType {\r\n    IMAGE, VIDEO, LINK, SELF, CONTENT_EMBED\r\n}\r\n\r\nexport function fromPostType(val: any) : PostType | null {\r\n    if (val) {\r\n        if (val.post_hint) {\r\n            const v = val.post_hint.toLowerCase();\r\n            switch(v) {\r\n                case 'image':\r\n                    return PostType.IMAGE;\r\n                case 'hosted:video':\r\n                    return PostType.VIDEO;\r\n                case 'rich:video':\r\n                    return PostType.CONTENT_EMBED;\r\n                case 'self':\r\n                    return PostType.SELF;\r\n                case 'link':\r\n                    return PostType.LINK;\r\n                default:\r\n                    return null;\r\n            }\r\n        } else if (val.selftext_html) {\r\n            return PostType.SELF;\r\n        } else if (val.is_video) {\r\n            return PostType.VIDEO;\r\n        } else if (val.secure_media && val.secure_media.oembed && val.secure_media.oembed.html) {\r\n            return PostType.CONTENT_EMBED;\r\n        }\r\n        \r\n    }\r\n    return PostType.IMAGE;\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PostType } from '../../classes/enums/post-type';\r\nimport { AppState } from '../../classes/interfaces/appstate';\r\nimport { PostVideo } from '../../classes/interfaces/post';\r\nimport './PostDetail.scss';\r\n\r\ninterface PostDetailProps {}\r\nexport const PostDetail = function (props: PostDetailProps) {\r\n    const post = useSelector((state: AppState) => state.selectedPost);\r\n\r\n    const htmlDecode = React.useCallback((input: string) => {\r\n        const e = document.createElement('div');\r\n        e.innerHTML = input;\r\n        return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue || '';\r\n    }, []);\r\n\r\n    const getPostBody = React.useCallback(() => {\r\n        if (!post) {\r\n            return null;\r\n        }\r\n        const vData = post.videoData || ({} as PostVideo);\r\n        switch (post.postType) {\r\n            case PostType.IMAGE:\r\n                return (\r\n                    <div className=\"Body-content\">\r\n                        <div className=\"PostPicture\" style={{ backgroundImage: `url(${post.postUrl})` }} />\r\n                    </div>\r\n                );\r\n            case PostType.VIDEO:\r\n                return (\r\n                    <div className=\"Body-content\">\r\n                        <video src={vData.url} className=\"Video\" autoPlay muted={false} controls preload=\"auto\" />\r\n                    </div>\r\n                );\r\n            case PostType.LINK:\r\n                return (\r\n                    <div className=\"Body-content NotCentered\">\r\n                        <a href={post.postUrl} className=\"Url\" target=\"_blank\">\r\n                            {post.postUrl}\r\n                        </a>\r\n                    </div>\r\n                );\r\n            case PostType.SELF:\r\n                return (\r\n                    <div\r\n                        className=\"Body-content NotCentered HtmlBody\"\r\n                        dangerouslySetInnerHTML={{ __html: htmlDecode(post.postHtml) }}\r\n                    ></div>\r\n                );\r\n            case PostType.CONTENT_EMBED:\r\n                return (\r\n                    <div\r\n                        className=\"Body-content EmbedVideo\"\r\n                        dangerouslySetInnerHTML={{ __html: htmlDecode(post.embedContent) }}\r\n                    ></div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }, [post, htmlDecode]);\r\n    if (!post) {\r\n        return null;\r\n    }\r\n\r\n    const body = getPostBody();\r\n    return (\r\n        <div className=\"PostDetailContainer\">\r\n            <div className=\"AuthorContainer\">\r\n                <span className=\"Author\">{post.author}</span>\r\n            </div>\r\n            <div\r\n                className=\"InnerContainer\"\r\n                style={\r\n                    !body\r\n                        ? { justifyContent: 'center' }\r\n                        : post.postType !== PostType.SELF\r\n                        ? { maxHeight: 'calc(100% - 6em)' }\r\n                        : {}\r\n                }\r\n            >\r\n                <span className=\"Title\" style={!body ? { fontSize: '2.6em' } : {}}>\r\n                    {post.title}\r\n                </span>\r\n                {body ? <div className=\"Body\">{body}</div> : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { Post } from '../classes/interfaces/post';\r\n\r\nexport class PostDBService {\r\n    private static instance: PostDBService;\r\n    private dbInstance: IDBDatabase | undefined;\r\n\r\n    public constructor() {\r\n        this.dbInstance = undefined;\r\n    }\r\n\r\n    public static getInstance(): PostDBService {\r\n        if (!this.instance) {\r\n            this.instance = new PostDBService();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private initDb(ev: Event, resolveFunc: (s: IDBDatabase) => void, reject: (val: any) => void) {\r\n        const db = (ev.target as any).result as IDBDatabase;\r\n        db.createObjectStore('ReadPosts', { keyPath: 'id' });\r\n        db.createObjectStore('DismissedPosts', { keyPath: 'id' });\r\n        const objectStore = db.createObjectStore('SavedPosts', { keyPath: 'id' });\r\n        objectStore.createIndex('jsonData', 'jsonData', { unique: false });\r\n        const tx = (ev.target as any).transaction as IDBTransaction;\r\n        tx.oncomplete = () => {\r\n            this.dbInstance = db;\r\n            resolveFunc(db);\r\n        };\r\n        tx.onerror = (ev) => {\r\n            this.dbInstance = db;\r\n            reject(ev);\r\n        };\r\n    }\r\n\r\n    private getDBRef(): Promise<IDBDatabase | undefined> {\r\n        if (this.dbInstance) {\r\n            return Promise.resolve(this.dbInstance);\r\n        }\r\n        return new Promise((res, rej) => {\r\n            const dbconnect: IDBOpenDBRequest = window.indexedDB.open('devgetDemo', 1);\r\n            dbconnect.onupgradeneeded = (ev: IDBVersionChangeEvent) => {\r\n                this.initDb(ev, res, rej);\r\n            };\r\n            dbconnect.onsuccess = (ev: Event) => {\r\n                const db = (ev.target as any).result;\r\n                this.dbInstance = db;\r\n                res(this.dbInstance);\r\n            };\r\n            dbconnect.onerror = (ev: Event) => {\r\n                rej(ev);\r\n            };\r\n        });\r\n    }\r\n\r\n    public createDB(): Promise<any> {\r\n        return this.getDBRef();\r\n    }\r\n\r\n    public saveRead(id: string): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['ReadPosts'], 'readwrite');\r\n\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore('ReadPosts');\r\n                    // add our newItem object to the object store\r\n                    const objectStoreRequest = objectStore.put({ id });\r\n\r\n                    objectStoreRequest.onsuccess = function (event) {\r\n                        res('');\r\n                    };\r\n                    objectStoreRequest.onerror = (ev: Event) => {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public saveDismissed(id: string): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['DismissedPosts'], 'readwrite');\r\n\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore('DismissedPosts');\r\n                    // add our newItem object to the object store\r\n                    const objectStoreRequest = objectStore.put({ id: id });\r\n                    objectStoreRequest.onsuccess = function (event) {\r\n                        res('');\r\n                    };\r\n                    objectStoreRequest.onerror = (ev: Event) => {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public savePost(p: Post): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['SavedPosts'], 'readwrite');\r\n\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore('SavedPosts');\r\n                    // add our newItem object to the object store\r\n                    const objectStoreRequest = objectStore.put({ id: p.id, jsonData: JSON.stringify(p) });\r\n                    objectStoreRequest.onsuccess = function (event) {\r\n                        res('');\r\n                    };\r\n                    objectStoreRequest.onerror = (ev: Event) => {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public getSavedPosts(): Promise<Post[]> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['SavedPosts'], 'readonly');\r\n\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore('SavedPosts');\r\n                    const query = objectStore.getAll();\r\n                    query.onsuccess = function (ev) {\r\n                        res(\r\n                            ((ev.target as any).result || []).map((x: any) => {\r\n                                const result: Post = JSON.parse(x.jsonData);\r\n                                result.createdTime = new Date(result.createdTimeUtc);\r\n                                return result;\r\n                            })\r\n                        );\r\n                    };\r\n                    query.onerror = function (ev) {\r\n                        rej(ev);\r\n                    };\r\n\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public saveDismissPosts(ids: string[]): Promise<any> {\r\n        if (!ids || !ids.length) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['DismissedPosts'], 'readwrite');\r\n\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore('DismissedPosts');\r\n                    // add our newItem object to the object store\r\n                    const requests: IDBRequest[] = [];\r\n                    ids.forEach((id) => {\r\n                        const obj = objectStore.put({ id: id });\r\n                        requests.push(obj);\r\n                        obj.onsuccess = function (event) {\r\n                            let allfinished = true;\r\n                            for (const i in requests) {\r\n                                const req = requests[i];\r\n                                if (req && req.readyState === 'pending') {\r\n                                    allfinished = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (allfinished) {\r\n                                res('');\r\n                            }\r\n                        };\r\n                        obj.onerror = (ev: Event) => {\r\n                            rej(ev);\r\n                        };\r\n                    });\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public getDismissedKeys(): Promise<string[]> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['DismissedPosts'], 'readonly');\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    const objectStore = transaction.objectStore('DismissedPosts');\r\n                    const query = objectStore.getAll();\r\n                    query.onsuccess = function (ev) {\r\n                        res(((ev.target as any).result || []).map((x: any) => x.id));\r\n                    };\r\n                    query.onerror = function (ev) {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public removeSavedPost(id: string): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['SavedPosts'], 'readwrite');\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    const objectStore = transaction.objectStore('SavedPosts');\r\n                    const query = objectStore.delete(id);\r\n                    query.onsuccess = function (ev) {\r\n                        res(true);\r\n                    };\r\n                    query.onerror = function (ev) {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public getAllReadKeys(): Promise<string[]> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction(['ReadPosts'], 'readonly');\r\n                    transaction.onerror = function (event) {\r\n                        rej(event);\r\n                    };\r\n                    const objectStore = transaction.objectStore('ReadPosts');\r\n                    const query = objectStore.getAll();\r\n                    query.onsuccess = function (ev) {\r\n                        res(((ev.target as any).result || []).map((x: any) => x.id));\r\n                    };\r\n                    query.onerror = function (ev) {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n}\r\n","export class ResponseDto<T> {\r\n    public data: T;\r\n    public success: boolean;\r\n    public message: string;\r\n    public code: number | undefined;\r\n\r\n    public constructor(data: T, success: boolean, message: string, code?: number) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.message = message;\r\n        this.code = code;\r\n    }\r\n}","export class Constants {\r\n    public static readonly REDDIT_BASE_URL = `https://www.reddit.com/top.json`;\r\n    public static readonly HTTP_TIMEOUT = 40000;\r\n    public static ERRORS = {\r\n        TIMEOUT_CODE: -1\r\n    }\r\n\r\n    public static REDUX_ACTIONS = {\r\n        FETCH_REQUEST_POSTS: 'fetch-request-posts',\r\n        UPDATE_POST_LIST: 'update-post-list',\r\n        FAIL_REQUEST_POSTS: 'fail-request-posts',\r\n\r\n        DISMISS_POST: 'dismiss-post',\r\n        SELECT_POST: 'select-post',\r\n\r\n        READ_POSTS_IDS: 'read-posts-ids',\r\n        DISMISSED_POSTS_IDS: 'dismissed-posts-ids',\r\n        UPDATE_CURRENT_ERROR: 'update-current-error',\r\n\r\n        UPDATE_DONE_DISMISS_DATA: 'update-done-dismiss-data',\r\n        UPDATE_SAVED_POSTS: 'update-saved-posts',\r\n        SHOW_SAVED_POSTS: 'show-saved-posts'\r\n    }\r\n\r\n    public static POST_LIST_PAGE_SIZES = [25, 50, 100];\r\n    public static MOBILE_WIDHT_LIMIT_PX = 1200;\r\n\r\n    public static APP_MESSAGES = {\r\n        HTTP_TIMEOUT: 'Connection timeout',\r\n        ERROR_GET_POSTS: 'Unable to get posts',\r\n        REFRESH_BUTTON: 'Refresh',\r\n        DISMISS_ALL_BUTTON: 'Dismiss All',\r\n        ERROR_TITLE: 'Error',\r\n        DISMISS_BUTTON: 'Dismiss',\r\n        SAVE_BUTTON: 'Save',\r\n        REMOVE_BUTTON: 'Remove',\r\n        SAVED_POSTS: 'Saved',\r\n        LOADING: 'Loading',\r\n        ERROR_DISMISS_POST: 'Unable to dismiss post',\r\n        ERROR_DISMISS_POSTS: 'Unable to dismiss posts',\r\n        ERROR_SAVE_READ_POST: \"Unable to save read post state\",\r\n        ERROR_GET_SAVED_POSTS: \"Unable to retrieve saved posts\",\r\n        ERROR_SAVE_POST: 'Unable to save post',\r\n        PAGE_SIZE_PLC: \"Page Size\"\r\n\r\n    }\r\n}","import { ResponseDto } from './../classes/response';\r\nimport { Constants } from './../constants';\r\n\r\nexport class PostHttpService {\r\n    private static instance: PostHttpService;\r\n    private readonly HTTP_TIMEOUT = Constants.HTTP_TIMEOUT;\r\n\r\n    public static getInstance(): PostHttpService {\r\n        if (!this.instance) {\r\n            this.instance = new PostHttpService();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public getPosts(after: string | null, limit: number): Promise<any> {\r\n        const params = [limit > 0 ? `limit=${limit}` : null, after ? `after=${after}` : null];\r\n\r\n        return Promise.race([\r\n            new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    reject(\r\n                        new ResponseDto<null>(null, false, Constants.APP_MESSAGES.HTTP_TIMEOUT, Constants.ERRORS.TIMEOUT_CODE)\r\n                    );\r\n                }, this.HTTP_TIMEOUT);\r\n            }),\r\n            fetch(Constants.REDDIT_BASE_URL + '?' + params.filter((x) => x !== null).join('&'))\r\n                .then((res) => res.json())\r\n                .then((response) => {\r\n                    if (response && response.data && response.data.children && response.data.children.length) {\r\n                        return {\r\n                            list: response.data.children.map((x: any) => x.data),\r\n                            after: response.data.after,\r\n                            before: response.data.before\r\n                        };\r\n                    }\r\n                    return {};\r\n                })\r\n        ]);\r\n    }\r\n}\r\n","import { PostDBService } from './PostDBService';\r\nimport { LensTwoTone } from '@material-ui/icons';\r\nimport { Post, PostVideo } from '../classes/interfaces/post';\r\nimport { PostHttpService } from './PostHttpService';\r\nimport { fromPostType } from '../classes/enums/post-type';\r\n\r\nexport class PostService {\r\n    private static instance: PostService;\r\n    private httpService: PostHttpService;\r\n    private dbService: PostDBService;\r\n    private lastAuthorId: string | null = '';\r\n\r\n    public constructor() {\r\n        this.httpService = PostHttpService.getInstance();\r\n        this.dbService = PostDBService.getInstance();\r\n    }\r\n    public static getInstance(): PostService {\r\n        if (!this.instance) {\r\n            this.instance = new PostService();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private getVideoData(x: any): PostVideo | null {\r\n        if (x && x.reddit_video) {\r\n            return {\r\n                width: x.reddit_video.width,\r\n                height: x.reddit_video.height,\r\n                url: x.reddit_video.fallback_url\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isValidThumbnailUrl(val: string): boolean {\r\n        val = (val || '').toLowerCase();\r\n        return (\r\n            !(!val || val === 'default' || val === 'self') &&\r\n            (val.endsWith('.jpg') || val.endsWith('.png') || val.endsWith('.gif') || val.endsWith('.jpeg')) &&\r\n            val.length > 5\r\n        );\r\n    }\r\n\r\n    private mapToPost(val: any): Post | null {\r\n        if (val) {\r\n            return {\r\n                author: val.subreddit_name_prefixed,\r\n                title: val.title,\r\n                name: val.name,\r\n                thumbnailUrl: !this.isValidThumbnailUrl(val.thumbnail) ? '' : val.thumbnail,\r\n                thumbnailDims:\r\n                    val.thumbnail_width && val.thumbnail_height\r\n                        ? {\r\n                              width: val.thumbnail_width,\r\n                              height: val.thumbnail_height\r\n                          }\r\n                        : null,\r\n                id: val.id,\r\n                createdTimeUtc: val.created_utc * 1000,\r\n                subreddit: val.subreddit,\r\n                postType: fromPostType(val),\r\n                postHtml: val.selftext_html,\r\n                postUrl: val.url_overridden_by_dest,\r\n                createdTime: new Date(val.created_utc * 1000),\r\n                numberOfComments: val.num_comments,\r\n                embedContent: val.secure_media && val.secure_media.oembed ? val.secure_media.oembed.html : null,\r\n                videoData: val.is_video && val.media ? this.getVideoData(val.media) : null\r\n            } as Post;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getPostsAux(limit: number, collected: Post[]): Promise<Post[]> {\r\n        return Promise.all([this.dbService.getDismissedKeys(), this.httpService.getPosts(this.lastAuthorId, limit)]).then(\r\n            (values) => {\r\n                const list = values[1] ? values[1].list : [];\r\n                const after = values[1] ? values[1].after : '';\r\n                const diss = values[0];\r\n                const dissMap = diss.reduce((prev, curr) => {\r\n                    prev[curr] = 1;\r\n                    return prev;\r\n                }, {} as any);\r\n                const result = (list || []).filter((x: any) => dissMap[x.id] !== 1).map((x: any) => this.mapToPost(x));\r\n                if (result.length) {\r\n                    collected = [...collected, ...result];\r\n                    if (after) {\r\n                        this.lastAuthorId = after;\r\n                        localStorage.setItem('lastAuthorId', this.lastAuthorId || '');\r\n\r\n                        if (result.length < limit) {\r\n                            return this.getPostsAux(limit - result.length, collected);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (after && this.lastAuthorId !== after) {\r\n                        this.lastAuthorId = after;\r\n                        return this.getPostsAux(limit, collected);\r\n                    }\r\n                }\r\n\r\n                return collected;\r\n            }\r\n        );\r\n    }\r\n\r\n    public getPosts(limit: number, reset: boolean | undefined): Promise<Post[]> {\r\n        if (reset) {\r\n            this.lastAuthorId = null;\r\n        }\r\n        return this.getPostsAux(limit, []);\r\n    }\r\n\r\n    public getReadPosts(): Promise<string[]> {\r\n        return this.dbService.getAllReadKeys();\r\n    }\r\n\r\n    public getDismissedPosts(): Promise<string[]> {\r\n        return this.dbService.getDismissedKeys();\r\n    }\r\n\r\n    public saveDismissPost(id: string): Promise<any> {\r\n        return this.dbService.saveDismissed(id);\r\n    }\r\n\r\n    public getSavedPosts(): Promise<Post[]> {\r\n        return this.dbService.getSavedPosts();\r\n    }\r\n\r\n    public savePost(p: Post): Promise<any> {\r\n        return this.dbService.savePost(p);\r\n    }\r\n\r\n    public saveDismissPosts(list: string[]): Promise<any> {\r\n        return this.dbService.saveDismissPosts(list);\r\n    }\r\n\r\n    public removeSavedPost(id: string): Promise<any> {\r\n        return this.dbService.removeSavedPost(id);\r\n    }\r\n\r\n    public saveReadPost(id: string): Promise<any> {\r\n        return this.dbService.saveRead(id);\r\n    }\r\n\r\n    public savePageSize(n: number) {\r\n        localStorage.setItem('pageSize', n + '');\r\n    }\r\n\r\n    public getPageSize(): number | null {\r\n        const val = localStorage.getItem('pageSize');\r\n        if (val) {\r\n            return parseInt(val, 10);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public init(): Promise<any> {\r\n        return this.dbService.createDB();\r\n    }\r\n}\r\n","import { Action, Dispatch } from 'redux';\r\nimport { AppAction } from '../classes/interfaces/appaction';\r\nimport { AppState } from '../classes/interfaces/appstate';\r\nimport { DismissData } from '../classes/interfaces/dismiss-data';\r\nimport { Post } from '../classes/interfaces/post';\r\nimport { ResponseDto } from '../classes/response';\r\nimport { PostService } from '../services/PostService';\r\nimport { Constants } from './../constants';\r\n\r\n\r\nexport const fetchRequestPosts = () => ({type: Constants.REDUX_ACTIONS.FETCH_REQUEST_POSTS, payload: null} as AppAction<null>);\r\nexport const updatePostsList = (list: Post[]) => ({type: Constants.REDUX_ACTIONS.UPDATE_POST_LIST, payload: list} as AppAction<Post[]>);\r\nexport const updateSavedPostsList = (list: Post[]) => ({type: Constants.REDUX_ACTIONS.UPDATE_SAVED_POSTS, payload: list} as AppAction<Post[]>);\r\nexport const failRequestPosts = (err: Error | ResponseDto<any>) => ({type: Constants.REDUX_ACTIONS.FAIL_REQUEST_POSTS, payload: err} as AppAction<Error | ResponseDto<any>>);\r\n\r\nexport const readPostsList = (v: string[]) => ({type: Constants.REDUX_ACTIONS.READ_POSTS_IDS, payload: v} as AppAction<string[]>);\r\nexport const dismissedPostsList = (v: string[]) => ({type: Constants.REDUX_ACTIONS.DISMISSED_POSTS_IDS, payload: v} as AppAction<string[]>);\r\nexport const showSaved = (v: boolean) => ({type: Constants.REDUX_ACTIONS.SHOW_SAVED_POSTS, payload: v} as AppAction<boolean>);\r\n\r\n\r\nexport const selectPost = (v: Post) => ({type: Constants.REDUX_ACTIONS.SELECT_POST, payload: v ? v.id : null} as AppAction<string>);\r\nexport const updateCurrentError = (v: string) => ({type: Constants.REDUX_ACTIONS.UPDATE_CURRENT_ERROR, payload: v} as AppAction<string>);\r\n\r\nexport const updateDoneDimissData = (v: DismissData | undefined) => ({type: Constants.REDUX_ACTIONS.UPDATE_DONE_DISMISS_DATA, payload: v} as AppAction<DismissData | undefined>);\r\n\r\n\r\nexport const requestPosts = (limit: number, reset?: boolean) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        dispatch(fetchRequestPosts());\r\n        const { posts } = getState() as AppState;\r\n        const postService = PostService.getInstance();\r\n        return postService.getPosts(limit, reset).then((list) => {\r\n            dispatch(updatePostsList(posts.concat(list)));\r\n        }).catch((err: Error | ResponseDto<any>) => {\r\n            dispatch(failRequestPosts(err));\r\n            dispatch(updateCurrentError(err && err.message ? err.message : Constants.APP_MESSAGES.ERROR_GET_POSTS));\r\n        });\r\n    };\r\n};\r\n\r\nexport const retrieveReadPosts = () => {\r\n    return (dispatch: Dispatch) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.getReadPosts().then((list) => {\r\n            dispatch(readPostsList(list));\r\n        });\r\n    };\r\n};\r\n\r\nexport const retrieveDismissedPosts = () => {\r\n    return (dispatch: Dispatch) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.getDismissedPosts().then((list) => {\r\n            dispatch(dismissedPostsList(list));\r\n        });\r\n    };\r\n};\r\n\r\nexport const saveDismissPost = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.saveDismissPost(id).then(() => {\r\n            dispatch(updateDoneDimissData({type: 'fadeOut', id}));\r\n        }).catch(err => {\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_DISMISS_POST));\r\n        });\r\n    };\r\n};\r\n\r\nexport const saveDismissPosts = (ids: string[]) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.saveDismissPosts(ids).then(() => {\r\n            dispatch(updateDoneDimissData({type: 'slideOut'}));\r\n        }).catch(err => {\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_DISMISS_POSTS));\r\n        });\r\n    };\r\n};\r\n\r\nexport const saveReadPost = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.saveReadPost(id).then(() => {\r\n            const { posts } = getState() as AppState;\r\n            postService.getReadPosts().then((list) => {\r\n                dispatch(readPostsList(list));\r\n            });\r\n            dispatch(updatePostsList([...posts]));\r\n        }).catch(err => {\r\n            const { posts } = getState() as AppState;\r\n            dispatch(updatePostsList([...posts]));\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_SAVE_READ_POST));\r\n        });\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const loadSavedPosts = () => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.getSavedPosts().then((ps: Post[]) => {\r\n            dispatch(updateSavedPostsList(ps));\r\n        }).catch((err) => {\r\n            console.error(err);\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_GET_SAVED_POSTS));\r\n        });\r\n    };\r\n};\r\n\r\nexport const savePost = (p: Post) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.savePost(p).then(() => {\r\n            return postService.getSavedPosts().then((ps: Post[]) => {\r\n                dispatch(updateSavedPostsList(ps));\r\n            });\r\n        }).catch(err => {\r\n            const { savedPosts } = getState() as AppState;\r\n            dispatch(updateSavedPostsList([...savedPosts]));\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_SAVE_READ_POST));\r\n        });\r\n    };\r\n};\r\n\r\nexport const removeSavedPost = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.removeSavedPost(id).then(() => {\r\n            dispatch(updateDoneDimissData({type: 'fadeOut', id}));\r\n        }).catch(() => {\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_SAVE_READ_POST));\r\n        });\r\n    };\r\n};\r\n\r\n\r\n","import { Post } from '../../classes/interfaces/post';\r\nimport React, { ForwardedRef, RefObject, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport './Post.scss';\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/CancelOutlined';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport SaveIcon from '@material-ui/icons/SaveOutlined';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { Constants } from '../../constants';\r\nimport Intl from 'intl';\r\nimport { AnyIfEmpty } from 'react-redux';\r\nimport { PostType } from '../../classes/enums/post-type';\r\n\r\nconst DAY_TIME = 1000 * 60 * 60 * 24;\r\nconst HOUR_TIME = 1000 * 60 * 60;\r\nconst MINUTE_TIME = 1000 * 60;\r\n\r\ninterface PostProps {\r\n    post: Post;\r\n    currentDate: Date;\r\n    onPress: (p: Post) => void;\r\n    onPressSave?: (p: Post) => void;\r\n    onPressRemoved?: (p: Post) => void;\r\n    read?: boolean;\r\n    canRemove?: boolean;\r\n    saved?: boolean;\r\n    onPressDismiss: (post: Post) => void;\r\n}\r\nexport interface PostRef {\r\n    fadeOut: () => Promise<any>;\r\n    id: string;\r\n    slideOut: (delay?: number) => Promise<any>;\r\n}\r\nconst PostUIFn = function (props: PostProps, ref1: ForwardedRef<any>) {\r\n    const [pressAnimation, setPressAnimation] = useState<boolean>(false);\r\n    const [fadeOutAnimation, setDismissFadeOutAnimation] = useState<boolean>(false);\r\n    const [slideOutAnimation, setDismissSlideOutAnimation] = useState<boolean>(false);\r\n    const [hidden, setHidden] = useState<boolean>(false);\r\n    const resolveFadeOutAnim = useRef<any>(null);\r\n    const resolveSlideAnim = useRef<any>(null);\r\n    const formatCreatedAt = React.useCallback(\r\n        (dt: Date) => {\r\n            const now = props.currentDate;\r\n            if (now && dt) {\r\n                const diff = now.getTime() + now.getTimezoneOffset() * 1000 * 60 - dt.getTime();\r\n                const days = Math.floor(diff / DAY_TIME);\r\n                const minutes = Math.floor(diff / MINUTE_TIME);\r\n                const hours = Math.floor(diff / HOUR_TIME);\r\n                if (diff > 0) {\r\n                    if (diff < MINUTE_TIME) {\r\n                        return 'Seconds ago';\r\n                    } else if (diff < HOUR_TIME) {\r\n                        return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n                    } else if (diff < DAY_TIME) {\r\n                        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n                    } else if (diff < 5 * DAY_TIME) {\r\n                        const hoursDiff = Math.floor((diff % DAY_TIME) / HOUR_TIME);\r\n                        if (hoursDiff > 0) {\r\n                            return `${days} day${days > 1 ? 's' : ''}, ${hoursDiff} hour${hoursDiff > 1 ? 's' : ''} ago`;\r\n                        } else {\r\n                            return `${days} day${days > 1 ? 's' : ''} ago`;\r\n                        }\r\n                    } else {\r\n                        return `${days} day${days > 1 ? 's' : ''} ago`;\r\n                    }\r\n                }\r\n            }\r\n            return '';\r\n        },\r\n        [props.currentDate]\r\n    );\r\n\r\n    const p = props.post;\r\n    const dismissButtonStyle = React.useMemo(\r\n        () => ({ paddingTop: '1px', paddingBottom: '1px', fontSize: '12px', marginRight: '5px' }),\r\n        []\r\n    );\r\n    useImperativeHandle(\r\n        ref1,\r\n        () => ({\r\n            fadeOut: () => {\r\n                if (resolveFadeOutAnim.current) {\r\n                    return Promise.reject('Animating');\r\n                }\r\n\r\n                setDismissFadeOutAnimation(true);\r\n                return new Promise((res) => {\r\n                    resolveFadeOutAnim.current = res;\r\n                });\r\n            },\r\n            slideOut: (delay?: number) => {\r\n                if (resolveSlideAnim.current) {\r\n                    return Promise.reject('Animating');\r\n                }\r\n                if (!delay) {\r\n                    setDismissSlideOutAnimation(true);\r\n                }\r\n                return new Promise((res) => {\r\n                    resolveSlideAnim.current = res;\r\n                    if (delay) {\r\n                        setTimeout(() => {\r\n                            setDismissSlideOutAnimation(true);\r\n                        }, delay);\r\n                    }\r\n                });\r\n            },\r\n            id: p.id\r\n        }),\r\n        [p]\r\n    );\r\n\r\n    const formatter = React.useMemo(() => {\r\n        return new Intl.NumberFormat('en-IR');\r\n    }, []);\r\n\r\n    const pressPost = React.useCallback(\r\n        (e) => {\r\n            setPressAnimation(true);\r\n            props.onPress && props.onPress(p);\r\n        },\r\n        [props.onPress, p]\r\n    );\r\n\r\n    const pressSave = React.useCallback(\r\n        (e: any) => {\r\n            e.stopPropagation();\r\n            props.onPressSave && props.onPressSave(p);\r\n        },\r\n        [props.onPressSave, p]\r\n    );\r\n\r\n    const animEnds = React.useCallback(\r\n        (e) => {\r\n            setPressAnimation(false);\r\n            if (fadeOutAnimation && resolveFadeOutAnim.current) {\r\n                resolveFadeOutAnim.current(true);\r\n            } else if (slideOutAnimation && resolveSlideAnim.current) {\r\n                setHidden(true);\r\n                resolveSlideAnim.current(true);\r\n            }\r\n            resolveSlideAnim.current = null;\r\n            resolveFadeOutAnim.current = null;\r\n            setDismissSlideOutAnimation(false);\r\n            setDismissFadeOutAnimation(false);\r\n        },\r\n        [p, fadeOutAnimation, slideOutAnimation]\r\n    );\r\n\r\n    const pressDismiss = React.useCallback(\r\n        (e: any) => {\r\n            e.stopPropagation();\r\n            props.onPressDismiss && props.onPressDismiss(p);\r\n        },\r\n        [props.onPressDismiss, p]\r\n    );\r\n\r\n    const pressRemoved = React.useCallback(\r\n        (e: any) => {\r\n            e.stopPropagation();\r\n            props.onPressRemoved && props.onPressRemoved(p);\r\n        },\r\n        [props.onPressRemoved, p]\r\n    );\r\n\r\n    const animationClassStr = React.useMemo(() => {\r\n        if (pressAnimation) {\r\n            return ' animate__animated animate__headShake';\r\n        } else if (fadeOutAnimation) {\r\n            return ' animate__animated animate__fadeOut';\r\n        } else if (slideOutAnimation) {\r\n            return ' animate__animated animate__slideOutLeft';\r\n        } else {\r\n            return '';\r\n        }\r\n    }, [slideOutAnimation, fadeOutAnimation, pressAnimation]);\r\n\r\n    const openFullSizeImage = React.useCallback(\r\n        (e) => {\r\n            const val = p.postUrl || '';\r\n            if (p.postType === PostType.IMAGE && (val.endsWith('.jpg') || val.endsWith('.png') || val.endsWith('.gif') || val.endsWith('.jpeg'))) {\r\n                e.stopPropagation();\r\n                window.open(p.postUrl, '_blank');\r\n            }\r\n        },\r\n        [p]\r\n    );\r\n\r\n    if (!props.post) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={'PostContainer ' + animationClassStr}\r\n            style={hidden ? { visibility: 'hidden' } : {}}\r\n            onClick={pressPost}\r\n            onAnimationEnd={animEnds}\r\n        >\r\n            <div className=\"Header\">\r\n                <div className=\"Header-left\">\r\n                    {!props.read ? <Icon className=\"ReadIcon\">fiber_manual_record</Icon> : null}\r\n                    <span className=\"Author\" style={props.read ? { left: 0 } : null}>\r\n                        {p.author}\r\n                    </span>\r\n                </div>\r\n                <div className=\"Header-right\">\r\n                    {props.saved ? <Icon className=\"SavedIcon\">save</Icon> : null}\r\n                    <span className=\"CreatedAt\">{formatCreatedAt(p.createdTime)}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"Body\">\r\n                {p.thumbnailUrl ? (\r\n                    <img\r\n                        src={p.thumbnailUrl}\r\n                        width={100}\r\n                        height={100}\r\n                        onClick={openFullSizeImage}\r\n                        className={'Thumbnail ' + (p.postType === PostType.IMAGE ? 'Clickable' : '')}\r\n                    />\r\n                ) : null}\r\n                <span className=\"Title\">{p.title}</span>\r\n            </div>\r\n            <div className=\"Footer\">\r\n                <div className=\"PostOptions\">\r\n                    {!props.saved ? (\r\n                        <>\r\n                            <Button\r\n                                onClick={pressDismiss}\r\n                                color=\"default\"\r\n                                size={'small'}\r\n                                style={dismissButtonStyle}\r\n                                variant=\"contained\"\r\n                                className=\"DismissButton\"\r\n                                startIcon={<DeleteIcon />}\r\n                            >\r\n                                {Constants.APP_MESSAGES.DISMISS_BUTTON}\r\n                            </Button>\r\n                            <Button\r\n                                onClick={pressSave}\r\n                                color=\"default\"\r\n                                size={'small'}\r\n                                style={dismissButtonStyle}\r\n                                variant=\"contained\"\r\n                                className=\"SaveButton\"\r\n                                startIcon={<SaveIcon />}\r\n                            >\r\n                                {Constants.APP_MESSAGES.SAVE_BUTTON}\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {props.canRemove ? (\r\n                                <Button\r\n                                    onClick={pressRemoved}\r\n                                    color=\"default\"\r\n                                    size={'small'}\r\n                                    style={dismissButtonStyle}\r\n                                    variant=\"contained\"\r\n                                    className=\"RemoveButton\"\r\n                                    startIcon={<DeleteOutlineIcon />}\r\n                                >\r\n                                    {Constants.APP_MESSAGES.REMOVE_BUTTON}\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    onClick={pressDismiss}\r\n                                    color=\"default\"\r\n                                    size={'small'}\r\n                                    style={dismissButtonStyle}\r\n                                    variant=\"contained\"\r\n                                    className=\"DismissButton\"\r\n                                    startIcon={<DeleteIcon />}\r\n                                >\r\n                                    {Constants.APP_MESSAGES.DISMISS_BUTTON}\r\n                                </Button>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n                <span className=\"CommentsNum\">\r\n                    {p.numberOfComments > 0 ? formatter.format(p.numberOfComments) + ' comment/s' : 'No comments'}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport const PostUI = React.forwardRef(PostUIFn);\r\n","export class Util {\r\n    public static getWindowDimensions(): { width: number; height: number } {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return {\r\n            width,\r\n            height\r\n        };\r\n    }\r\n}\r\n","import { Button, IconButton, InputBase, MenuItem, Select } from '@material-ui/core';\r\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\r\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { debounce } from 'lodash';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppState } from '../../classes/interfaces/appstate';\r\nimport { Post } from '../../classes/interfaces/post';\r\nimport { PostService } from '../../services/PostService';\r\nimport {\r\n    loadSavedPosts,\r\n    removeSavedPost,\r\n    requestPosts,\r\n    retrieveDismissedPosts,\r\n    retrieveReadPosts,\r\n    saveDismissPost,\r\n    saveDismissPosts,\r\n    savePost,\r\n    saveReadPost,\r\n    selectPost,\r\n    updateDoneDimissData,\r\n    updatePostsList,\r\n    updateSavedPostsList,\r\n    showSaved as showSavedAction\r\n} from '../../state/actions';\r\nimport { PostRef, PostUI } from '../post/PostUI';\r\nimport { Util } from '../util';\r\nimport { Constants } from '../../constants';\r\nimport './PostList.scss';\r\n\r\ninterface PostListProps {}\r\nexport const PostList = function (props: PostListProps) {\r\n    const postService = React.useMemo(() => {\r\n        return PostService.getInstance();\r\n    }, []);\r\n\r\n    const [pageSize, setPageSize] = useState<number>(postService.getPageSize() || Constants.POST_LIST_PAGE_SIZES[0]);\r\n    const [ready, setReady] = useState<boolean>(false);\r\n    const [slideAnimating, setSlideAnimating] = useState<boolean>(false);\r\n    const [menuAnimating, setMenuAnimating] = useState<boolean>(false);\r\n    const [menuOpened, setMenuOpened] = useState<boolean | undefined>(undefined);\r\n    const [windowDimensions, setWindowDimensions] = useState(Util.getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        setMenuOpened(true);\r\n        function handleResize() {\r\n            setMenuOpened(undefined);\r\n            setWindowDimensions(Util.getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const dispatch = useDispatch();\r\n    const postsRead = useSelector((state: AppState) => state.postsRead);\r\n    const selectedPost = useSelector((state: AppState) => state.selectedPost);\r\n    const showSaved = useSelector((state: AppState) => state.showSaved);\r\n    const initFetch = React.useCallback(\r\n        (oSize: number) => {\r\n            postRefsMap.current = {};\r\n            dispatch(updatePostsList([]));\r\n            dispatch(requestPosts(oSize, true));\r\n            dispatch(retrieveReadPosts());\r\n            dispatch(retrieveDismissedPosts());\r\n            dispatch(loadSavedPosts());\r\n            dispatch(showSavedAction(false));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!ready) {\r\n            postService\r\n                .init()\r\n                .then(() => {\r\n                    setReady(true);\r\n                    initFetch(pageSize);\r\n                })\r\n                .catch(() => {\r\n                    setReady(true);\r\n                    initFetch(pageSize);\r\n                });\r\n        }\r\n    }, [postService, dispatch]);\r\n\r\n    const posts = useSelector((state: AppState) => state.posts);\r\n    const savedPosts = useSelector((state: AppState) => state.savedPosts);\r\n    const fetchingPosts = useSelector((state: AppState) => state.fetchingPosts);\r\n    const dismissData = useSelector((state: AppState) => state.dismissData);\r\n    const postRefsMap = useRef<{ [key: string]: PostRef }>({});\r\n\r\n    const runDismissFadeOutAnimation = React.useCallback(\r\n        (postToDismiss: PostRef | undefined) => {\r\n            if (postToDismiss) {\r\n                postToDismiss\r\n                    .fadeOut()\r\n                    .then(() => {\r\n                        dispatch(updatePostsList(posts.filter((x) => x.id !== postToDismiss.id)));\r\n                        dispatch(updateDoneDimissData(undefined));\r\n                        delete postRefsMap.current[postToDismiss.id];\r\n                    })\r\n                    .catch(() => {});\r\n            }\r\n        },\r\n        [posts, dispatch]\r\n    );\r\n\r\n    const runRemoveFadeOutAnimation = React.useCallback(\r\n        (postToDismiss: PostRef | undefined) => {\r\n            if (postToDismiss) {\r\n                postToDismiss\r\n                    .fadeOut()\r\n                    .then(() => {\r\n                        dispatch(updateSavedPostsList(savedPosts.filter((x) => x.id !== postToDismiss.id)));\r\n                        dispatch(updateDoneDimissData(undefined));\r\n                        delete postRefsMap.current[postToDismiss.id];\r\n                    })\r\n                    .catch(() => {});\r\n            }\r\n        },\r\n        [savedPosts, dispatch]\r\n    );\r\n\r\n    const runSlideOutAnimation = React.useCallback(() => {\r\n        let to = 0;\r\n        const promises: Promise<any>[] = [];\r\n        setSlideAnimating(true);\r\n        posts.forEach((x, i) => {\r\n            const postRef = postRefsMap.current[x.id];\r\n            to = Math.min(600, i * 25);\r\n            promises.push(postRef.slideOut(to));\r\n        });\r\n\r\n        Promise.all(promises)\r\n            .then(() => {\r\n                dispatch(updateDoneDimissData(undefined));\r\n                dispatch(updatePostsList([]));\r\n                postRefsMap.current = {};\r\n                setSlideAnimating(false);\r\n            })\r\n            .catch(() => {\r\n                setSlideAnimating(false);\r\n            });\r\n    }, [posts, dispatch]);\r\n    const [_, setRandom] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        let list = posts;\r\n        if (showSaved) {\r\n            list = savedPosts;\r\n        }\r\n        if (list.length === Object.keys(postRefsMap.current).length && dismissData) {\r\n            if (dismissData.type === 'fadeOut') {\r\n                if (selectedPost && selectedPost.id === dismissData.id) {\r\n                    dispatch(selectPost(null));\r\n                }\r\n\r\n                const postToDismiss = postRefsMap.current[dismissData.id || ''];\r\n                if (showSaved) {\r\n                    runRemoveFadeOutAnimation(postToDismiss);\r\n                } else {\r\n                    runDismissFadeOutAnimation(postToDismiss);\r\n                }\r\n            } else if (dismissData.type === 'slideOut') {\r\n                dispatch(selectPost(null));\r\n                runSlideOutAnimation();\r\n            }\r\n        }\r\n    }, [\r\n        dismissData,\r\n        runSlideOutAnimation,\r\n        runRemoveFadeOutAnimation,\r\n        runDismissFadeOutAnimation,\r\n        posts,\r\n        showSaved,\r\n        selectedPost\r\n    ]);\r\n\r\n    const onPress = React.useCallback(\r\n        (p: Post) => {\r\n            dispatch(saveReadPost(p.id));\r\n            dispatch(selectPost(p));\r\n            if (windowDimensions.width < Constants.MOBILE_WIDHT_LIMIT_PX) {\r\n                setMenuOpened(false);\r\n            }\r\n        },\r\n        [dispatch, windowDimensions]\r\n    );\r\n\r\n    const onPressSave = React.useCallback(\r\n        (p: Post) => {\r\n            dispatch(savePost(p));\r\n        },\r\n        [dispatch, windowDimensions]\r\n    );\r\n\r\n    const onScroll = React.useCallback(\r\n        debounce((e: any) => {\r\n            const bottomReached =\r\n                e.target.scrollHeight - e.target.scrollTop <= e.target.clientHeight * 1.1 && e.target.scrollTop > 0;\r\n            if (bottomReached && !fetchingPosts && !slideAnimating && !showSaved) {\r\n                dispatch(requestPosts(pageSize));\r\n            }\r\n        }, 350),\r\n        [dispatch, pageSize, fetchingPosts, slideAnimating, showSaved]\r\n    );\r\n\r\n    const postsReadMap = React.useMemo(() => {\r\n        return postsRead.reduce((prev, current: string) => {\r\n            (prev as any)[current] = 1;\r\n            return prev;\r\n        }, {} as { [key: string]: string });\r\n    }, [postsRead]);\r\n\r\n    const postsSavedMap = React.useMemo(() => {\r\n        return savedPosts.reduce((prev, current: Post) => {\r\n            (prev as any)[current.id] = 1;\r\n            return prev;\r\n        }, {} as { [key: string]: string });\r\n    }, [savedPosts]);\r\n\r\n    const onDismissed = React.useCallback(\r\n        (p: Post) => {\r\n            dispatch(saveDismissPost(p.id));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    const setPostRef = React.useCallback((rs: any, id: string) => {\r\n        if (rs) {\r\n            postRefsMap.current[id] = rs;\r\n        } else {\r\n            delete postRefsMap.current[id];\r\n        }\r\n    }, []);\r\n\r\n    const onRemoveSaved = React.useCallback(\r\n        (p: Post) => {\r\n            dispatch(removeSavedPost(p.id));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    const postsEl = React.useMemo(() => {\r\n        let list: Post[] = posts;\r\n        if (showSaved) {\r\n            list = savedPosts;\r\n        }\r\n        return list.map((x) => (\r\n            <PostUI\r\n                key={x.id}\r\n                post={x}\r\n                currentDate={new Date()}\r\n                saved={postsSavedMap[x.id] !== undefined}\r\n                read={postsReadMap[x.id] !== undefined}\r\n                canRemove={showSaved && postsSavedMap[x.id] !== undefined}\r\n                onPressRemoved={onRemoveSaved}\r\n                onPressDismiss={onDismissed}\r\n                onPress={onPress}\r\n                onPressSave={onPressSave}\r\n                ref={(r) => setPostRef(r, x.id)}\r\n            ></PostUI>\r\n        ));\r\n    }, [posts, postsReadMap, showSaved, savedPosts, postsSavedMap]);\r\n\r\n    const handleChange = React.useCallback(\r\n        (ev: any) => {\r\n            if (ev && ev.target && ev.target.value) {\r\n                dispatch(showSavedAction(false));\r\n                setPageSize(ev.target.value);\r\n                postService.savePageSize(ev.target.value);\r\n                initFetch(ev.target.value);\r\n            }\r\n        },\r\n        [initFetch, postService, dispatch]\r\n    );\r\n\r\n    const refreshPress = React.useCallback(\r\n        (ev: any) => {\r\n            dispatch(showSavedAction(false));\r\n            initFetch(pageSize);\r\n        },\r\n        [initFetch, pageSize, dispatch]\r\n    );\r\n\r\n    const dismissAllPress = React.useCallback(\r\n        (ev: any) => {\r\n            if (!slideAnimating) {\r\n                dispatch(showSavedAction(false));\r\n                const ids = posts.map((x) => x.id);\r\n                dispatch(saveDismissPosts(ids));\r\n            }\r\n        },\r\n        [slideAnimating, posts, dispatch]\r\n    );\r\n\r\n    const showSavedPress = React.useCallback(\r\n        (ev: any) => {\r\n            if (!slideAnimating) {\r\n                if (!showSaved) {\r\n                    postRefsMap.current = {};\r\n                    dispatch(showSavedAction(true));\r\n                    dispatch(loadSavedPosts());\r\n                    setRandom(Math.random());\r\n                } else {\r\n                    postRefsMap.current = {};\r\n                    dispatch(showSavedAction(false));\r\n                }\r\n            }\r\n        },\r\n        [slideAnimating, posts, dispatch, showSaved]\r\n    );\r\n\r\n    const onAnimSliderEnd = React.useCallback(() => {\r\n        setMenuAnimating(false);\r\n    }, []);\r\n\r\n    const openMenu = React.useCallback(() => {\r\n        if (!menuAnimating) {\r\n            setMenuOpened((x) => !x);\r\n            setMenuAnimating(true);\r\n        }\r\n    }, [menuAnimating]);\r\n\r\n    const pageSizes = React.useMemo(() => {\r\n        return Constants.POST_LIST_PAGE_SIZES.map((x) => (\r\n            <MenuItem value={x} key={x}>\r\n                {x}\r\n            </MenuItem>\r\n        ));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"PostListContainer\">\r\n            <IconButton aria-label=\"delete\" className={'MenuButton '} onClick={openMenu}>\r\n                <MenuIcon fontSize=\"large\" />\r\n            </IconButton>\r\n            <div\r\n                className={\r\n                    'PostListBody ' +\r\n                    (windowDimensions.width < Constants.MOBILE_WIDHT_LIMIT_PX && menuOpened !== undefined\r\n                        ? menuOpened\r\n                            ? 'animate__animated animate__slideInLeft'\r\n                            : 'animate__animated animate__slideOutLeft'\r\n                        : '')\r\n                }\r\n                onAnimationEnd={onAnimSliderEnd}\r\n            >\r\n                <div className=\"PostListOptions\">\r\n                    <Select\r\n                        value={pageSize}\r\n                        className=\"Option PageSizeDropdown\"\r\n                        onChange={handleChange}\r\n                        input={<InputBase placeholder={Constants.APP_MESSAGES.PAGE_SIZE_PLC} style={{ paddingLeft: '12px' }} />}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>{Constants.APP_MESSAGES.PAGE_SIZE_PLC}</em>\r\n                        </MenuItem>\r\n                        {pageSizes}\r\n                    </Select>\r\n                    <Button variant=\"contained\" className=\"Option ReloadButton\" onClick={refreshPress} endIcon={<RefreshIcon />}>\r\n                        {Constants.APP_MESSAGES.REFRESH_BUTTON}\r\n                    </Button>\r\n                    {!showSaved ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className=\"Option DismissAllButton\"\r\n                            onClick={dismissAllPress}\r\n                            endIcon={<ClearAllIcon />}\r\n                        >\r\n                            {Constants.APP_MESSAGES.DISMISS_ALL_BUTTON}\r\n                        </Button>\r\n                    ) : null}\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className={'Option SavedPostsButton ' + (showSaved ? 'SavedButtonFocus' : '')}\r\n                        onClick={showSavedPress}\r\n                        endIcon={<SaveOutlinedIcon />}\r\n                    >\r\n                        {Constants.APP_MESSAGES.SAVED_POSTS}\r\n                    </Button>\r\n                </div>\r\n                <div className=\"PostListInnerContainer\" style={!postsEl.length ? { border: 'none' } : {}} onScroll={onScroll}>\r\n                    {postsEl}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { Backdrop, CircularProgress, Fade, Modal } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.scss';\r\nimport { AppState } from './classes/interfaces/appstate';\r\nimport { PostDetail } from './components/post-detail/PostDetail';\r\nimport { PostList } from './components/post-list/PostList';\r\nimport { Constants } from './constants';\r\nimport { PostService } from './services/PostService';\r\nimport { updateCurrentError } from './state/actions';\r\nimport 'intl/locale-data/jsonp/en-US';\r\n\r\nfunction App(): React.ReactNode {\r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const fetchingPosts = useSelector((state: AppState) => state.fetchingPosts);\r\n    const currentError = useSelector((state: AppState) => state.currentError);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setModalOpen(false);\r\n        dispatch(updateCurrentError(''));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (fetchingPosts || currentError) {\r\n            setModalOpen(true);\r\n        } else {\r\n            setModalOpen(false);\r\n        }\r\n    }, [fetchingPosts, currentError]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <PostList />\r\n            <PostDetail />\r\n            <Modal\r\n                aria-labelledby=\"spring-modal-title\"\r\n                aria-describedby=\"spring-modal-description\"\r\n                className=\"Modal\"\r\n                open={modalOpen}\r\n                onClose={handleClose}\r\n                closeAfterTransition={true}\r\n                disableBackdropClick={fetchingPosts}\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500\r\n                }}\r\n            >\r\n                <Fade in={modalOpen}>\r\n                    {currentError ? (\r\n                        <div className=\"Paper\">\r\n                            <span className=\"Modal-title\">{Constants.APP_MESSAGES.ERROR_TITLE}</span>\r\n                            <span className=\"Modal-description\">{currentError}</span>\r\n                        </div>\r\n                    ) : fetchingPosts ? (\r\n                        <div className=\"Paper\">\r\n                            <span className=\"Modal-title\">{Constants.APP_MESSAGES.LOADING}...</span>\r\n                            <CircularProgress color=\"secondary\" />\r\n                        </div>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { showSaved } from './actions';\r\nimport { Constants } from '../constants';\r\nimport { Action } from \"redux\";\r\nimport { AppState } from \"../classes/interfaces/appstate\";\r\nimport { AppAction } from '../classes/interfaces/appaction';\r\n\r\nconst initialState: AppState = {\r\n    posts: [],\r\n    selectedPost: null,\r\n    fetchingPosts: false,\r\n    currentError: '',\r\n    postsRead: [],\r\n    dismissData: undefined,\r\n    savedPosts: [],\r\n    showSaved: false\r\n};\r\n\r\nexport default function(state: AppState = initialState, action: AppAction<any>): AppState {\r\n    switch(action.type) {\r\n        case Constants.REDUX_ACTIONS.UPDATE_POST_LIST:\r\n            return {\r\n                ...state,\r\n                posts: action.payload,\r\n                fetchingPosts: false\r\n            };\r\n        case Constants.REDUX_ACTIONS.FAIL_REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                fetchingPosts: false\r\n            };\r\n        case Constants.REDUX_ACTIONS.SELECT_POST:\r\n            return {\r\n                ...state,\r\n                selectedPost: state.showSaved ? state.savedPosts.find(x => x.id === action.payload) : state.posts.find(x => x.id === action.payload)\r\n            };\r\n        case Constants.REDUX_ACTIONS.FETCH_REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                fetchingPosts: true\r\n            };\r\n        case Constants.REDUX_ACTIONS.UPDATE_CURRENT_ERROR:\r\n            return {\r\n                ...state,\r\n                currentError: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.READ_POSTS_IDS:\r\n            return {\r\n                ...state,\r\n                postsRead: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.UPDATE_DONE_DISMISS_DATA:\r\n            return {\r\n                ...state,\r\n                dismissData: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.UPDATE_SAVED_POSTS:\r\n            return {\r\n                ...state,\r\n                savedPosts: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.SHOW_SAVED_POSTS:\r\n            return {\r\n                ...state,\r\n                showSaved: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","/* eslint-disable react/jsx-filename-extension */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport rootReducer from './state/rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}