{"version":3,"sources":["classes/enums/post-type.ts","components/post-detail/PostDetail.tsx","services/PostDBService.ts","classes/response.ts","constants.ts","services/PostHttpService.ts","services/PostService.ts","state/actions.ts","components/post/PostUI.tsx","components/util.ts","components/post-list/PostList.tsx","App.tsx","reportWebVitals.js","state/rootReducer.ts","index.js"],"names":["PostType","fromPostType","val","post_hint","toLowerCase","IMAGE","VIDEO","CONTENT_EMBED","SELF","LINK","selftext_html","is_video","secure_media","oembed","html","PostDetail","props","post","useSelector","state","selectedPost","htmlDecode","React","useCallback","input","e","document","createElement","innerHTML","childNodes","length","nodeValue","getPostBody","vData","videoData","postType","className","style","backgroundImage","postUrl","src","url","autoPlay","controls","href","target","dangerouslySetInnerHTML","__html","postHtml","embedContent","body","author","maxHeight","justifyContent","fontSize","title","PostDBService","dbInstance","this","undefined","ev","resolveFunc","reject","db","result","createObjectStore","keyPath","createIndex","unique","tx","transaction","oncomplete","onerror","Promise","resolve","res","rej","dbconnect","window","indexedDB","open","onupgradeneeded","initDb","onsuccess","getDBRef","id","then","event","objectStoreRequest","objectStore","put","Error","p","jsonData","JSON","stringify","query","getAll","map","x","parse","createdTime","Date","createdTimeUtc","ids","requests","forEach","obj","push","allfinished","i","req","readyState","delete","instance","ResponseDto","data","success","message","code","Constants","REDDIT_BASE_URL","HTTP_TIMEOUT","ERRORS","TIMEOUT_CODE","REDUX_ACTIONS","FETCH_REQUEST_POSTS","UPDATE_POST_LIST","FAIL_REQUEST_POSTS","DISMISS_POST","SELECT_POST","READ_POSTS_IDS","DISMISSED_POSTS_IDS","UPDATE_CURRENT_ERROR","UPDATE_DONE_DISMISS_DATA","UPDATE_SAVED_POSTS","SHOW_SAVED_POSTS","POST_LIST_PAGE_SIZES","MOBILE_WIDHT_LIMIT_PX","APP_MESSAGES","ERROR_GET_POSTS","REFRESH_BUTTON","DISMISS_ALL_BUTTON","ERROR_TITLE","DISMISS_BUTTON","SAVE_BUTTON","REMOVE_BUTTON","SAVED_POSTS","LOADING","ERROR_DISMISS_POST","ERROR_DISMISS_POSTS","ERROR_SAVE_READ_POST","ERROR_GET_SAVED_POSTS","ERROR_SAVE_POST","PAGE_SIZE_PLC","PostHttpService","after","limit","params","race","setTimeout","fetch","filter","join","json","response","children","list","before","PostService","httpService","dbService","lastAuthorId","getInstance","reddit_video","width","height","fallback_url","endsWith","author_fullname","name","thumbnailUrl","isValidThumbnailUrl","thumbnail","thumbnailDims","thumbnail_width","thumbnail_height","created_utc","subreddit","url_overridden_by_dest","numberOfComments","num_comments","media","getVideoData","collected","all","getDismissedKeys","getPosts","values","dissMap","reduce","prev","curr","mapToPost","localStorage","setItem","getPostsAux","reset","getAllReadKeys","saveDismissed","getSavedPosts","savePost","saveDismissPosts","removeSavedPost","saveRead","n","getItem","parseInt","createDB","updatePostsList","type","payload","updateSavedPostsList","readPostsList","v","showSaved","selectPost","updateCurrentError","updateDoneDimissData","requestPosts","dispatch","getState","posts","concat","catch","err","failRequestPosts","retrieveDismissedPosts","getDismissedPosts","loadSavedPosts","ps","console","error","DAY_TIME","HOUR_TIME","PostUIFn","ref1","useState","pressAnimation","setPressAnimation","fadeOutAnimation","setDismissFadeOutAnimation","slideOutAnimation","setDismissSlideOutAnimation","hidden","setHidden","resolveFadeOutAnim","useRef","resolveSlideAnim","formatCreatedAt","dt","now","currentDate","diff","getTime","getTimezoneOffset","days","Math","floor","minutes","hours","hoursDiff","dismissButtonStyle","useMemo","paddingTop","paddingBottom","marginRight","useImperativeHandle","fadeOut","current","slideOut","delay","formatter","Intl","NumberFormat","pressPost","onPress","pressSave","stopPropagation","onPressSave","animEnds","pressDismiss","onPressDismiss","pressRemoved","onPressRemoved","animationClassStr","openFullSizeImage","visibility","onClick","onAnimationEnd","read","Icon","left","saved","canRemove","Button","color","size","variant","startIcon","format","PostUI","forwardRef","Util","innerWidth","innerHeight","PostList","postService","getPageSize","pageSize","setPageSize","ready","setReady","slideAnimating","setSlideAnimating","menuAnimating","setMenuAnimating","menuOpened","setMenuOpened","getWindowDimensions","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useDispatch","postsRead","initFetch","oSize","postRefsMap","getReadPosts","showSavedAction","init","savedPosts","fetchingPosts","dismissData","runDismissFadeOutAnimation","postToDismiss","runRemoveFadeOutAnimation","runSlideOutAnimation","to","promises","postRef","min","setRandom","Object","keys","saveReadPost","onScroll","debounce","scrollHeight","scrollTop","clientHeight","postsReadMap","postsSavedMap","onDismissed","saveDismissPost","setPostRef","rs","onRemoveSaved","postsEl","ref","r","handleChange","value","savePageSize","refreshPress","dismissAllPress","showSavedPress","random","onAnimSliderEnd","openMenu","pageSizes","MenuItem","IconButton","aria-label","Select","onChange","InputBase","placeholder","paddingLeft","endIcon","border","App","modalOpen","setModalOpen","currentError","handleClose","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","disableBackdropClick","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","find","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"qJAAYA,E,kGAIL,SAASC,EAAaC,GACzB,GAAIA,EACA,GAAIA,EAAIC,UAAW,CAEf,OADUD,EAAIC,UAAUC,eAEpB,IAAK,QACD,OAAOJ,EAASK,MACpB,IAAK,eACD,OAAOL,EAASM,MACpB,IAAK,aACD,OAAON,EAASO,cACpB,IAAK,OACD,OAAOP,EAASQ,KACpB,IAAK,OACD,OAAOR,EAASS,KACpB,QACI,OAAO,UAEZ,IAAIP,EAAIQ,cACX,OAAOV,EAASQ,KACb,GAAIN,EAAIS,SACX,OAAOX,EAASM,MACb,GAAIJ,EAAIU,cAAgBV,EAAIU,aAAaC,QAAUX,EAAIU,aAAaC,OAAOC,KAC9E,OAAOd,EAASO,cAIxB,OAAOP,EAASK,O,SA/BRL,O,iBAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,kCAAAA,M,sBCSCe,EAAa,SAASC,GAC/B,IAAMC,EAAOC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,gBAE9CC,EAAaC,IAAMC,aAAY,SAACC,GAClC,IAAMC,EAAIC,SAASC,cAAc,OAEjC,OADAF,EAAEG,UAAYJ,EACiB,IAAxBC,EAAEI,WAAWC,OAAe,GAAML,EAAEI,WAAW,GAAGE,WAAa,KACvE,IAEGC,EAAcV,IAAMC,aAAY,WAClC,IAAKN,EACD,OAAO,KAEX,IAAMgB,EAAQhB,EAAKiB,WAAa,GAChC,OAAOjB,EAAKkB,UACR,KAAKnC,EAASK,MACV,OAAO,qBAAK+B,UAAU,eAAf,SAA8B,qBAAKA,UAAU,cAAcC,MAAO,CAACC,gBAAgB,OAAD,OAASrB,EAAKsB,QAAd,UAC7F,KAAKvC,EAASM,MACV,OAAO,qBAAK8B,UAAU,eAAf,SAA8B,uBAAOI,IAAKP,EAAMQ,IAAKL,UAAU,QAAQM,UAAQ,EAACC,UAAQ,MACnG,KAAK3C,EAASS,KACV,OAAO,qBAAK2B,UAAU,2BAAf,SAA0C,mBAAGQ,KAAM3B,EAAKsB,QAASH,UAAU,MAAMS,OAAO,SAA9C,SAAwD5B,EAAKsB,YAClH,KAAKvC,EAASQ,KACV,OAAO,qBAAK4B,UAAU,oCAAoCU,wBAAyB,CAACC,OAAQ1B,EAAWJ,EAAK+B,aAChH,KAAKhD,EAASO,cACV,OAAO,qBAAK6B,UAAU,0BAA0BU,wBAAyB,CAACC,OAAQ1B,EAAWJ,EAAKgC,iBACtG,QACI,OAAO,QAEhB,CAAChC,EAAMI,IACV,IAAKJ,EACD,OAAO,KAGX,IAAMiC,EAAOlB,IACb,OAAO,sBAAKI,UAAU,sBAAf,UACH,qBAAKA,UAAU,kBAAf,SAAiC,sBAAMA,UAAU,SAAhB,SAA0BnB,EAAKkC,WAChE,sBAAKf,UAAU,iBAAiBC,MAAQa,EAAoCjC,EAAKkB,WAAanC,EAASQ,KAAO,CAAC4C,UAAW,oBAAsB,GAAjG,CAACC,eAAgB,UAAhE,UACI,sBAAMjB,UAAU,QAAQC,MAAQa,EAA6B,GAAtB,CAACI,SAAU,SAAlD,SAAkErC,EAAKsC,QAEnEL,EAAO,qBAAKd,UAAU,OAAf,SAAuBc,IAAc,Y,iJC9C/CM,EAAb,WAII,aAAsB,yBAFdC,gBAEa,EACjBC,KAAKD,gBAAaE,EAL1B,0CAeI,SAAeC,EAAWC,EAAuCC,GAA6B,IAAD,OACnFC,EAAMH,EAAGf,OAAemB,OAC9BD,EAAGE,kBAAkB,YAAa,CAAEC,QAAS,OAC7CH,EAAGE,kBAAkB,iBAAkB,CAAEC,QAAS,OAC9BH,EAAGE,kBAAkB,aAAc,CAAEC,QAAS,OACtDC,YAAY,WAAY,WAAY,CAAEC,QAAQ,IAC1D,IAAMC,EAAMT,EAAGf,OAAeyB,YAC9BD,EAAGE,WAAa,WACZ,EAAKd,WAAaM,EAClBF,EAAYE,IAEhBM,EAAGG,QAAU,SAACZ,GACV,EAAKH,WAAaM,EAClBD,EAAOF,MA5BnB,sBAgCI,WAAsD,IAAD,OACjD,OAAIF,KAAKD,WACEgB,QAAQC,QAAQhB,KAAKD,YAEzB,IAAIgB,SAAQ,SAACE,EAAKC,GACrB,IAAMC,EAA8BC,OAAOC,UAAUC,KAAK,aAAc,GACxEH,EAAUI,gBAAkB,SAACrB,GACzB,EAAKsB,OAAOtB,EAAIe,EAAKC,IAEzBC,EAAUM,UAAY,SAACvB,GACnB,IAAMG,EAAMH,EAAGf,OAAemB,OAC9B,EAAKP,WAAaM,EAClBY,EAAI,EAAKlB,aAEboB,EAAUL,QAAU,SAACZ,GACjBgB,EAAIhB,SA/CpB,sBAqDI,WACI,OAAOF,KAAK0B,aAtDpB,sBAyDI,SAAgBC,GAA2B,IAAD,OACtC,OAAO3B,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,aAAc,aAE/DA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAGR,IAEMC,EAFclB,EAAYmB,YAAY,aAELC,IAAI,CAACL,OAQ5C,OANAG,EAAmBL,UAAY,SAASI,GACpCZ,EAAI,UAERa,EAAmBhB,QAAU,SAACZ,GAC1BgB,EAAIhB,KAIZgB,EAAI,IAAIe,MAAM,2BA/E9B,2BAoFI,SAAqBN,GAA2B,IAAD,OAC3C,OAAO3B,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,kBAAmB,aAEpEA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAGR,IAEMC,EAFclB,EAAYmB,YAAY,kBAELC,IAAI,CAACL,GAAIA,IAOhD,OANAG,EAAmBL,UAAY,SAASI,GACpCZ,EAAI,UAERa,EAAmBhB,QAAU,SAACZ,GAC1BgB,EAAIhB,KAIZgB,EAAI,IAAIe,MAAM,2BAzG9B,sBA+GI,SAAgBC,GAAwB,IAAD,OACnC,OAAOlC,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,cAAe,aAEhEA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAGR,IAEMC,EAFclB,EAAYmB,YAAY,cAELC,IAAI,CAACL,GAAIO,EAAEP,GAAIQ,SAAUC,KAAKC,UAAUH,KAO/E,OANAJ,EAAmBL,UAAY,SAASI,GACpCZ,EAAI,UAERa,EAAmBhB,QAAU,SAACZ,GAC1BgB,EAAIhB,KAIZgB,EAAI,IAAIe,MAAM,2BApI9B,2BA0II,WAAyC,IAAD,OACpC,OAAOjC,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,cAAe,YAEhEA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAGR,IACMS,EADc1B,EAAYmB,YAAY,cAClBQ,SAY1B,OAXAD,EAAMb,UAAY,SAASvB,GACvBe,GAAMf,EAAGf,OAAemB,QAAU,IAAIkC,KAAI,SAACC,GACvC,IAAMnC,EAAe8B,KAAKM,MAAMD,EAAEN,UAElC,OADA7B,EAAOqC,YAAc,IAAIC,KAAKtC,EAAOuC,gBAC9BvC,YAGfgC,EAAMxB,QAAU,SAASZ,GACrBgB,EAAIhB,KAKZgB,EAAI,IAAIe,MAAM,2BAnK9B,8BAwKI,SAAwBa,GAA8B,IAAD,OACjD,OAAKA,GAAQA,EAAI1E,OAGV4B,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAT,CACI,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,kBAAmB,aAEpEA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAGR,IAAME,EAAcnB,EAAYmB,YAAY,kBAEtCgB,EAAyB,GAC/BD,EAAIE,SAAQ,SAAArB,GACR,IAAMsB,EAAMlB,EAAYC,IAAI,CAACL,GAAIA,IACjCoB,EAASG,KAAKD,GACdA,EAAIxB,UAAY,SAASI,GACrB,IAAIsB,GAAc,EAClB,IAAK,IAAMC,KAAKL,EAAU,CACtB,IAAMM,EAAMN,EAASK,GACrB,GAAIC,GAA0B,YAAnBA,EAAIC,WAA0B,CACrCH,GAAc,EACd,OAGJA,GACAlC,EAAI,KAGZgC,EAAInC,QAAU,SAACZ,GACXgB,EAAIhB,YAKhBgB,EAAI,IAAIe,MAAM,yBApCXlB,QAAQC,QAAQ,QA1KnC,8BAoNI,WAA8C,IAAD,OACzC,OAAOhB,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,kBAAmB,YACpEA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAER,IACMS,EADc1B,EAAYmB,YAAY,kBAClBQ,SAO1B,OANAD,EAAMb,UAAY,SAASvB,GACvBe,GAAMf,EAAGf,OAAemB,QAAU,IAAIkC,KAAI,SAACC,GAAD,OAAYA,EAAEd,aAE5DW,EAAMxB,QAAU,SAASZ,GACrBgB,EAAIhB,KAIZgB,EAAI,IAAIe,MAAM,2BAtO9B,6BA4OI,SAAuBN,GAA2B,IAAD,OAC7C,OAAO3B,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,cAAe,aAChEA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAER,IACMS,EADc1B,EAAYmB,YAAY,cAClBwB,OAAO5B,GAOjC,OANAW,EAAMb,UAAY,SAASvB,GACvBe,GAAI,SAERqB,EAAMxB,QAAU,SAASZ,GACrBgB,EAAIhB,KAIZgB,EAAI,IAAIe,MAAM,2BA9P9B,4BAmQI,WAA4C,IAAD,OACvC,OAAOjC,KAAK0B,WAAWE,MAAK,WACxB,OAAO,IAAIb,SAAQ,SAACE,EAAKC,GACrB,GAAI,EAAKnB,WAAY,CACjB,IAAMa,EAAc,EAAKb,WAAWa,YAAY,CAAC,aAAc,YAC/DA,EAAYE,QAAU,SAASe,GAC3BX,EAAIW,IAER,IACMS,EADc1B,EAAYmB,YAAY,aAClBQ,SAO1B,OANAD,EAAMb,UAAY,SAASvB,GACvBe,GAAMf,EAAGf,OAAemB,QAAU,IAAIkC,KAAI,SAACC,GAAD,OAAYA,EAAEd,aAE5DW,EAAMxB,QAAU,SAASZ,GACrBgB,EAAIhB,KAIZgB,EAAI,IAAIe,MAAM,4BArR9B,0BAQI,WAII,OAHKjC,KAAKwD,WACNxD,KAAKwD,SAAW,IAAI1D,GAEjBE,KAAKwD,aAZpB,KAAa1D,EACM0D,c,ECHZ,IAAMC,EAMT,WAAmBC,EAASC,EAAkBC,EAAiBC,GAAgB,yBALxEH,UAKuE,OAJvEC,aAIuE,OAHvEC,aAGuE,OAFvEC,UAEuE,EAC1E7D,KAAK0D,KAAOA,EACZ1D,KAAK2D,QAAUA,EACf3D,KAAK4D,QAAUA,EACf5D,KAAK6D,KAAOA,GCVPC,EAAb,kCAAaA,EACcC,gB,kCADdD,EAEcE,aAAe,IAF7BF,EAGKG,OAAS,CACnBC,cAAe,GAJVJ,EAOKK,cAAgB,CAC1BC,oBAAqB,sBACrBC,iBAAkB,mBAClBC,mBAAoB,qBAEpBC,aAAc,eACdC,YAAa,cAEbC,eAAgB,iBAChBC,oBAAqB,sBACrBC,qBAAsB,uBAEtBC,yBAA0B,2BAC1BC,mBAAoB,qBACpBC,iBAAkB,oBArBbhB,EAwBKiB,qBAAuB,CAAC,GAAI,GAAI,KAxBrCjB,EAyBKkB,sBAAwB,KAzB7BlB,EA2BKmB,aAAe,CACzBjB,aAAc,qBACdkB,gBAAiB,sBACjBC,eAAgB,UAChBC,mBAAoB,cACpBC,YAAa,QACbC,eAAgB,UAChBC,YAAa,OACbC,cAAe,SACfC,YAAa,QACbC,QAAS,UACTC,mBAAoB,yBACpBC,oBAAqB,0BACrBC,qBAAsB,iCACtBC,sBAAuB,iCACvBC,gBAAiB,sBACjBC,cAAe,aCvChB,IAAMC,EAAb,iDAEqBjC,aAAeF,EAAUE,aAF9C,4CAWI,SAAgBkC,EAAsBC,GAA8B,IAAD,OACzDC,EAAS,CACXD,EAAQ,EAAR,gBAAqBA,GAAU,KAC/BD,EAAK,gBAAYA,GAAU,MAG/B,OAAOnF,QAAQsF,KAAK,CAChB,IAAItF,SAAQ,SAACC,EAASZ,GAClBkG,YAAW,WACPlG,EAAO,IAAIqD,EAAkB,MAAM,EAAOK,EAAUmB,aAAajB,aAAcF,EAAUG,OAAOC,iBACjG,EAAKF,iBAEZuC,MAAMzC,EAAUC,gBAAkB,IAAMqC,EAAOI,QAAO,SAAA/D,GAAC,OAAU,OAANA,KAAYgE,KAAK,MAAM7E,MAAK,SAAAX,GAAG,OAAIA,EAAIyF,UACjG9E,MAAK,SAAA+E,GACF,OAAIA,GAAYA,EAASjD,MAAQiD,EAASjD,KAAKkD,UAAYD,EAASjD,KAAKkD,SAASxI,OACvE,CACHyI,KAAMF,EAASjD,KAAKkD,SAASpE,KAAI,SAACC,GAAD,OAAYA,EAAEiB,QAC/CwC,MAAOS,EAASjD,KAAKwC,MACrBY,OAAQH,EAASjD,KAAKoD,QAGvB,WAhCvB,0BAII,WAII,OAHK9G,KAAKwD,WACNxD,KAAKwD,SAAW,IAAIyC,GAEjBjG,KAAKwD,aARpB,KAAayC,EACMzC,c,ECIZ,IAAMuD,EAAb,WAMI,aAAsB,yBAJdC,iBAIa,OAHbC,eAGa,OAFbC,aAA8B,GAGlClH,KAAKgH,YAAcf,EAAgBkB,cACnCnH,KAAKiH,UAAYnH,EAAcqH,cARvC,gDAoBI,SAAqB1E,GACjB,OAAIA,GAAKA,EAAE2E,aACA,CACHC,MAAO5E,EAAE2E,aAAaC,MACtBC,OAAQ7E,EAAE2E,aAAaE,OACvBvI,IAAK0D,EAAE2E,aAAaG,cAGrB,OA5Bf,iCA+BI,SAA4B/K,GAExB,UADAA,GAAOA,GAAO,IAAIE,gBACO,YAARF,GAA6B,SAARA,KAAoBA,EAAIgL,SAAS,SAAWhL,EAAIgL,SAAS,SAAWhL,EAAIgL,SAAS,SAAWhL,EAAIgL,SAAS,WAAahL,EAAI4B,OAAS,IAjCjL,uBAoCI,SAAkB5B,GACd,OAAIA,EACO,CACHiD,OAAQjD,EAAIiL,gBACZ5H,MAAOrD,EAAIqD,MACX6H,KAAMlL,EAAIkL,KACVC,aAAe3H,KAAK4H,oBAAoBpL,EAAIqL,WAAkBrL,EAAIqL,UAAT,GACzDC,cAAetL,EAAIuL,iBAAmBvL,EAAIwL,iBAAmB,CACzDX,MAAO7K,EAAIuL,gBACXT,OAAQ9K,EAAIwL,kBACZ,KACJrG,GAAInF,EAAImF,GACRkB,eAAkC,IAAlBrG,EAAIyL,YACpBC,UAAW1L,EAAI0L,UACfzJ,SAAUlC,EAAaC,GACvB8C,SAAU9C,EAAIQ,cACd6B,QAASrC,EAAI2L,uBACbxF,YAAa,IAAIC,KAAuB,IAAlBpG,EAAIyL,aAC1BG,iBAAkB5L,EAAI6L,aACtB9I,aAAc/C,EAAIU,cAAgBV,EAAIU,aAAaC,OAASX,EAAIU,aAAaC,OAAOC,KAAO,KAC3FoB,UAAWhC,EAAIS,UAAYT,EAAI8L,MAAQtI,KAAKuI,aAAa/L,EAAI8L,OAAS,MAGvE,OA3Df,yBA8DI,SAAoBnC,EAAeqC,GAAqC,IAAD,OACnE,OAAOzH,QAAQ0H,IAAI,CACfzI,KAAKiH,UAAUyB,mBACf1I,KAAKgH,YAAY2B,SAAS3I,KAAKkH,aAAcf,KAC9CvE,MAAK,SAAAgH,GACJ,IAAM/B,EAAO+B,EAAO,GAAKA,EAAO,GAAG/B,KAAO,GACpCX,EAAQ0C,EAAO,GAAKA,EAAO,GAAG1C,MAAQ,GAEtC2C,EADOD,EAAO,GACCE,QAAO,SAACC,EAAMC,GAE/B,OADAD,EAAKC,GAAQ,EACND,IACR,IACGzI,GAAUuG,GAAQ,IAAIL,QAAO,SAAC/D,GAAD,OAA8B,IAAlBoG,EAAQpG,EAAEd,OAAWa,KAAI,SAACC,GAAD,OAAY,EAAKwG,UAAUxG,MACnG,GAAInC,EAAOlC,QAEP,GADAoK,EAAS,sBAAOA,GAAP,YAAqBlI,IAC1B4F,IACA,EAAKgB,aAAehB,EACpBgD,aAAaC,QAAQ,eAAgB,EAAKjC,cAAgB,IAEtD5G,EAAOlC,OAAS+H,GAChB,OAAO,EAAKiD,YAAYjD,EAAQ7F,EAAOlC,OAAQoK,QAIvD,GAAItC,GAAS,EAAKgB,eAAiBhB,EAE/B,OADA,EAAKgB,aAAehB,EACb,EAAKkD,YAAYjD,EAAOqC,GAKvC,OAAOA,OA7FnB,sBAiGI,SAAgBrC,EAAekD,GAI3B,OAHIA,IACArJ,KAAKkH,aAAe,MAEjBlH,KAAKoJ,YAAYjD,EAAO,MArGvC,0BAwGI,WACI,OAAOnG,KAAKiH,UAAUqC,mBAzG9B,+BA4GI,WACI,OAAOtJ,KAAKiH,UAAUyB,qBA7G9B,6BAgHI,SAAuB/G,GACnB,OAAO3B,KAAKiH,UAAUsC,cAAc5H,KAjH5C,2BAoHI,WACI,OAAO3B,KAAKiH,UAAUuC,kBArH9B,sBAwHI,SAAgBtH,GACZ,OAAOlC,KAAKiH,UAAUwC,SAASvH,KAzHvC,8BA4HI,SAAwB2E,GACpB,OAAO7G,KAAKiH,UAAUyC,iBAAiB7C,KA7H/C,6BAgII,SAAuBlF,GACnB,OAAO3B,KAAKiH,UAAU0C,gBAAgBhI,KAjI9C,0BAoII,SAAoBA,GAEhB,OAAO3B,KAAKiH,UAAU2C,SAASjI,KAtIvC,0BAyII,SAAoBkI,GAChBX,aAAaC,QAAQ,WAAYU,EAAI,MA1I7C,yBA6II,WACI,IAAMrN,EAAM0M,aAAaY,QAAQ,YACjC,OAAItN,EACOuN,SAASvN,EAAK,IAElB,OAlJf,kBAqJI,WACI,OAAOwD,KAAKiH,UAAU+C,cAtJ9B,0BAaI,WAII,OAHKhK,KAAKwD,WACNxD,KAAKwD,SAAW,IAAIuD,GAEjB/G,KAAKwD,aAjBpB,KAAauD,EACMvD,c,ECAZ,IACMyG,EAAkB,SAACpD,GAAD,MAAmB,CAACqD,KAAMpG,EAAUK,cAAcE,iBAAkB8F,QAAStD,IAC/FuD,EAAuB,SAACvD,GAAD,MAAmB,CAACqD,KAAMpG,EAAUK,cAAcU,mBAAoBsF,QAAStD,IAGtGwD,EAAgB,SAACC,GAAD,MAAkB,CAACJ,KAAMpG,EAAUK,cAAcM,eAAgB0F,QAASG,IAE1FC,EAAY,SAACD,GAAD,MAAiB,CAACJ,KAAMpG,EAAUK,cAAcW,iBAAkBqF,QAASG,IAGvFE,EAAa,SAACF,GAAD,MAAc,CAACJ,KAAMpG,EAAUK,cAAcK,YAAa2F,QAASG,EAAIA,EAAE3I,GAAK,OAC3F8I,EAAqB,SAACH,GAAD,MAAgB,CAACJ,KAAMpG,EAAUK,cAAcQ,qBAAsBwF,QAASG,IAEnGI,EAAuB,SAACJ,GAAD,MAAiC,CAACJ,KAAMpG,EAAUK,cAAcS,yBAA0BuF,QAASG,IAG1HK,EAAe,SAACxE,EAAekD,GACxC,OAAO,SAACuB,EAAoBC,GACxBD,EAlBgC,CAACV,KAAMpG,EAAUK,cAAcC,oBAAqB+F,QAAS,OAiBxC,IAE7CW,EAAUD,IAAVC,MAER,OADoB/D,EAAYI,cACbwB,SAASxC,EAAOkD,GAAOzH,MAAK,SAACiF,GAC5C+D,EAASX,EAAgBa,EAAMC,OAAOlE,QACvCmE,OAAM,SAACC,GACNL,EArBoB,SAACK,GAAD,MAAoC,CAACf,KAAMpG,EAAUK,cAAcG,mBAAoB6F,QAASc,GAqB3GC,CAAiBD,IAC1BL,EAASH,EAAmBQ,GAAOA,EAAIrH,QAAUqH,EAAIrH,QAAUE,EAAUmB,aAAaC,uBAcrFiG,EAAyB,WAClC,OAAO,SAACP,GAEJ,OADoB7D,EAAYI,cACbiE,oBAAoBxJ,MAAK,SAACiF,GApCnB,IAACyD,EAqCvBM,GArCuBN,EAqCKzD,EArCY,CAACqD,KAAMpG,EAAUK,cAAcO,oBAAqByF,QAASG,UAmFpGe,EAAiB,WAC1B,OAAO,SAACT,EAAoBC,GAExB,OADoB9D,EAAYI,cACbqC,gBAAgB5H,MAAK,SAAC0J,GACrCV,EAASR,EAAqBkB,OAC/BN,OAAM,SAACC,GACNM,QAAQC,MAAMP,GACdL,EAASH,EAAmB3G,EAAUmB,aAAaa,6B,uEC5FzD2F,GAAW,MACXC,GAAY,KAmBZC,GAAW,SAASrO,EAAkBsO,GAA0B,IAAD,EACrBC,oBAAkB,GADG,mBAC1DC,EAD0D,KAC1CC,EAD0C,OAEVF,oBAAkB,GAFR,mBAE1DG,EAF0D,KAExCC,EAFwC,OAGRJ,oBAAkB,GAHV,mBAG1DK,EAH0D,KAGvCC,EAHuC,OAIrCN,oBAAkB,GAJmB,mBAI1DO,EAJ0D,KAIlDC,EAJkD,KAK3DC,EAAqBC,iBAAY,MACjCC,EAAmBD,iBAAY,MAC/BE,EAAkB7O,IAAMC,aAAY,SAAC6O,GACvC,IAAMC,EAAMrP,EAAMsP,YAClB,GAAID,GAAOD,EAAI,CACX,IAAMG,EAAOF,EAAIG,UAAsC,IAA1BH,EAAII,oBAA6B,GAAKL,EAAGI,UAChEE,EAAOC,KAAKC,MAAML,EAAOpB,IACzB0B,EAAUF,KAAKC,MAAML,EA9BnB,KA+BFO,EAAQH,KAAKC,MAAML,EAAOnB,IAChC,GAAImB,EAAO,EAAG,CACV,GAAIA,EAjCA,IAkCA,MAAM,cACH,GAAIA,EAAOnB,GACd,MAAM,GAAN,OAAUyB,EAAV,kBAA2BA,EAAU,EAAI,IAAM,GAA/C,QACG,GAAIN,EAAOpB,GACd,MAAM,GAAN,OAAU2B,EAAV,gBAAuBA,EAAQ,EAAI,IAAM,GAAzC,QACG,GAAIP,EAAO,MAAc,CAC5B,IAAMQ,EAAYJ,KAAKC,MAAOL,EAAOpB,GAAYC,IACjD,OAAI2B,EAAY,EACN,GAAN,OAAUL,EAAV,eAAqBA,EAAO,EAAI,IAAM,GAAtC,aAA6CK,EAA7C,gBAA8DA,EAAY,EAAI,IAAM,GAApF,QAEM,GAAN,OAAUL,EAAV,eAAqBA,EAAO,EAAI,IAAM,GAAtC,QAIJ,MAAM,GAAN,OAAUA,EAAV,eAAqBA,EAAO,EAAI,IAAM,GAAtC,SAKZ,MAAO,KACR,CAAC1P,EAAMsP,cAEJ1K,EAAI5E,EAAMC,KACV+P,EAAqB1P,IAAM2P,SAAQ,iBAAO,CAACC,WAAY,MAAOC,cAAe,MAAO7N,SAAU,OAAQ8N,YAAa,SAAS,IAClIC,8BAAoB/B,GAAM,iBAAO,CAC7BgC,QAAS,WACL,OAAItB,EAAmBuB,QACZ9M,QAAQX,OAAO,cAG1B6L,GAA2B,GACpB,IAAIlL,SAAQ,SAAAE,GACfqL,EAAmBuB,QAAU5M,OAGrC6M,SAAU,SAACC,GACP,OAAIvB,EAAiBqB,QACV9M,QAAQX,OAAO,cAErB2N,GACD5B,GAA4B,GAEzB,IAAIpL,SAAQ,SAAAE,GACfuL,EAAiBqB,QAAU5M,EACvB8M,GACAzH,YAAW,WACP6F,GAA4B,KAC7B4B,QAIfpM,GAAIO,EAAEP,MACN,CAACO,IAEL,IAAM8L,EAAYpQ,IAAM2P,SAAQ,WAC5B,OAAO,IAAIU,KAAKC,aAAa,WAC9B,IAGGC,EAAYvQ,IAAMC,aAAY,SAACE,GACjCgO,GAAkB,GAClBzO,EAAM8Q,SAAW9Q,EAAM8Q,QAAQlM,KAChC,CAAC5E,EAAM8Q,QAASlM,IAEbmM,EAAYzQ,IAAMC,aAAY,SAACE,GACjCA,EAAEuQ,kBACFhR,EAAMiR,aAAejR,EAAMiR,YAAYrM,KACxC,CAAC5E,EAAMiR,YAAarM,IAGjBsM,EAAW5Q,IAAMC,aAAY,SAACE,GAChCgO,GAAkB,GACdC,GAAoBM,EAAmBuB,QACvCvB,EAAmBuB,SAAQ,GACpB3B,GAAqBM,EAAiBqB,UAC7CxB,GAAU,GACVG,EAAiBqB,SAAQ,IAE7BrB,EAAiBqB,QAAU,KAC3BvB,EAAmBuB,QAAU,KAC7B1B,GAA4B,GAC5BF,GAA2B,KAC5B,CAAC/J,EAAG8J,EAAkBE,IAEnBuC,EAAe7Q,IAAMC,aAAY,SAACE,GACpCA,EAAEuQ,kBACFhR,EAAMoR,gBAAkBpR,EAAMoR,eAAexM,KAC9C,CAAC5E,EAAMoR,eAAgBxM,IAEpByM,EAAe/Q,IAAMC,aAAY,SAACE,GACpCA,EAAEuQ,kBACFhR,EAAMsR,gBAAkBtR,EAAMsR,eAAe1M,KAC9C,CAAC5E,EAAMsR,eAAgB1M,IAEpB2M,EAAoBjR,IAAM2P,SAAQ,WACpC,OAAIzB,EACM,wCACCE,EACA,sCACAE,EACA,2CAEA,KAEZ,CAACA,EAAmBF,EAAkBF,IAEnCgD,EAAoBlR,IAAMC,aAAY,SAACE,GACrCmE,EAAEzD,WAAanC,EAASK,QACxBoB,EAAEuQ,kBACFlN,OAAOE,KAAKY,EAAErD,QAAS,aAE5B,CAACqD,IAEJ,OAAK5E,EAAMC,KAIJ,sBAAKmB,UAAW,iBAAmBmQ,EAAmBlQ,MAAOyN,EAAS,CAAC2C,WAAY,UAAY,GAAIC,QAASb,EAAWc,eAAgBT,EAAvI,UACH,sBAAK9P,UAAU,SAAf,UACI,sBAAKA,UAAU,cAAf,UACMpB,EAAM4R,KAA+D,KAAxD,cAACC,EAAA,EAAD,CAAMzQ,UAAU,WAAhB,iCACf,sBAAMA,UAAU,SAASC,MAAOrB,EAAM4R,KAAO,CAACE,KAAM,GAAK,KAAzD,SAAgElN,EAAEzC,YAEtE,sBAAKf,UAAU,eAAf,UACKpB,EAAM+R,MAAQ,cAACF,EAAA,EAAD,CAAMzQ,UAAU,YAAhB,kBAA0C,KACzD,sBAAMA,UAAU,YAAhB,SAA6B+N,EAAgBvK,EAAES,qBAIvD,sBAAKjE,UAAU,OAAf,UACKwD,EAAEyF,aAAe,qBAAK7I,IAAKoD,EAAEyF,aAAcN,MAAO,IAAKC,OAAQ,IAAK0H,QAASF,EAAmBpQ,UAAW,cAAgBwD,EAAEzD,WAAanC,EAASK,MAAQ,YAAc,MAAW,KACrL,sBAAM+B,UAAU,QAAhB,SAAyBwD,EAAErC,WAE/B,sBAAKnB,UAAU,SAAf,UACI,qBAAKA,UAAU,cAAf,SAESpB,EAAM+R,MAKP,mCACK/R,EAAMgS,UAAY,cAACC,EAAA,EAAD,CAAQP,QAASL,EAAca,MAAM,UAAUC,KAAM,QAAS9Q,MAAO2O,EAAoBoC,QAAQ,YAAYhR,UAAU,eAAeiR,UAAW,cAAC,IAAD,IAAjJ,SAAyK7L,EAAUmB,aAAaO,gBAC/M,cAAC+J,EAAA,EAAD,CAAQP,QAASP,EAAce,MAAM,UAAUC,KAAM,QAAS9Q,MAAO2O,EAAoBoC,QAAQ,YAAYhR,UAAU,gBAAgBiR,UAAW,cAAC,IAAD,IAAlJ,SAAmK7L,EAAUmB,aAAaK,mBANlM,qCACI,cAACiK,EAAA,EAAD,CAAQP,QAASP,EAAce,MAAM,UAAUC,KAAM,QAAS9Q,MAAO2O,EAAoBoC,QAAQ,YAAYhR,UAAU,gBAAgBiR,UAAW,cAAC,IAAD,IAAlJ,SAAmK7L,EAAUmB,aAAaK,iBAC1L,cAACiK,EAAA,EAAD,CAAQP,QAASX,EAAWmB,MAAM,UAAUC,KAAM,QAAS9Q,MAAO2O,EAAoBoC,QAAQ,YAAYhR,UAAU,aAAaiR,UAAW,cAAC,IAAD,IAA5I,SAA2J7L,EAAUmB,aAAaM,mBAW9L,sBAAM7G,UAAU,cAAhB,SAA+BwD,EAAEkG,iBAAmB,EAAI4F,EAAU4B,OAAO1N,EAAEkG,kBAAoB,aAAe,sBApC3G,MAwCFyH,GAASjS,IAAMkS,WAAWnE,IC5M1BoE,GAAb,wGACI,WAAqC,IAAD,EACmB3O,OACnD,MAAO,CACHiG,MAH4B,EACxB2I,WAGJ1I,OAJ4B,EACL2I,iBAFnC,KCmBaC,I,OAAW,SAAS5S,GAE/B,IAAM6S,EAAcvS,IAAM2P,SAAQ,WAChC,OAAOxG,EAAYI,gBAClB,IAJkD,EAMrB0E,mBAAiBsE,EAAYC,eAAiBtM,EAAUiB,qBAAqB,IANxD,mBAM9CsL,EAN8C,KAMpCC,EANoC,OAO3BzE,oBAAkB,GAPS,mBAO9C0E,EAP8C,KAOvCC,EAPuC,OAQT3E,oBAAkB,GART,mBAQ9C4E,EAR8C,KAQ9BC,EAR8B,OASX7E,oBAAkB,GATP,mBAS9C8E,EAT8C,KAS/BC,EAT+B,OAUjB/E,wBAA8B5L,GAVb,mBAU9C4Q,EAV8C,KAUlCC,EAVkC,OAWLjF,mBAASkE,GAAKgB,uBAXT,mBAW9CC,EAX8C,KAW5BC,EAX4B,KAarDC,qBAAU,WAER,SAASC,IACPL,OAAc7Q,GACdgR,EAAoBlB,GAAKgB,uBAI3B,OAPAD,GAAc,GAMd1P,OAAOgQ,iBAAiB,SAAUD,GAC3B,kBAAM/P,OAAOiQ,oBAAoB,SAAUF,MACjD,IAGH,IAAMvG,GAAW0G,cACXC,GAAY/T,aAAY,SAACC,GAAD,OAAqBA,EAAM8T,aACnD7T,GAAeF,aAAY,SAACC,GAAD,OAAqBA,EAAMC,gBACtD6M,GAAY/M,aAAY,SAACC,GAAD,OAAqBA,EAAM8M,aACnDiH,GAAY5T,IAAMC,aAAY,SAAC4T,GACnCC,GAAY7D,QAAU,GACtBjD,GAASX,EAAgB,KACzBW,GAASD,EAAa8G,GAAO,IAC7B7G,IHXO,SAACA,GAEJ,OADoB7D,EAAYI,cACbwK,eAAe/P,MAAK,SAACiF,GACpC+D,EAASP,EAAcxD,UGS/B+D,GAASO,KACTP,GAASS,KACTT,GAASgH,GAAgB,MACxB,CAAChH,KAEJsG,qBAAU,WACHX,GACHJ,EAAY0B,OAAOjQ,MAAK,WACpB4O,GAAS,GACTgB,GAAUnB,MACXrF,OAAM,WACLwF,GAAS,GACTgB,GAAUnB,QAGf,CAACF,EAAavF,KAGjB,IAAME,GAAQtN,aAAY,SAACC,GAAD,OAAqBA,EAAMqN,SAC/CgH,GAAatU,aAAY,SAACC,GAAD,OAAqBA,EAAMqU,cACpDC,GAAgBvU,aAAY,SAACC,GAAD,OAAqBA,EAAMsU,iBACvDC,GAAcxU,aAAY,SAACC,GAAD,OAAqBA,EAAMuU,eACrDN,GAAcnF,iBAAiC,IAE/C0F,GAA6BrU,IAAMC,aAAY,SAACqU,GAChDA,GACFA,EAActE,UAAUhM,MAAK,WAC3BgJ,GAASX,EAAgBa,GAAMtE,QAAO,SAAA/D,GAAC,OAAIA,EAAEd,KAAOuQ,EAAcvQ,QAClEiJ,GAASF,OAAqBzK,WACvByR,GAAY7D,QAAQqE,EAAcvQ,OACxCqJ,OAAM,iBAEV,CAACF,GAAOF,KAELuH,GAA4BvU,IAAMC,aAAY,SAACqU,GAC/CA,GACFA,EAActE,UAAUhM,MAAK,WAC3BgJ,GAASR,EAAqB0H,GAAWtL,QAAO,SAAA/D,GAAC,OAAIA,EAAEd,KAAOuQ,EAAcvQ,QAC5EiJ,GAASF,OAAqBzK,WACvByR,GAAY7D,QAAQqE,EAAcvQ,OACxCqJ,OAAM,iBAEV,CAAC8G,GAAYlH,KAEVwH,GAAsBxU,IAAMC,aAAY,WAC1C,IAAIwU,EAAK,EACHC,EAA2B,GACjC5B,GAAkB,GAClB5F,GAAM9H,SAAQ,SAACP,EAAGW,GAChB,IAAMmP,EAAUb,GAAY7D,QAAQpL,EAAEd,IACtC0Q,EAAKpF,KAAKuF,IAAI,IAAS,GAAJpP,GACnBkP,EAASpP,KAAKqP,EAAQzE,SAASuE,OAGjCtR,QAAQ0H,IAAI6J,GAAU1Q,MAAK,WACzBgJ,GAASF,OAAqBzK,IAC9B2K,GAASX,EAAgB,KACzByH,GAAY7D,QAAU,GACtB6C,GAAkB,MACjB1F,OAAM,WACP0F,GAAkB,QAErB,CAAC5F,GAAOF,KAhG0C,GAiG9BiB,mBAAiB,GAjGa,qBAiG3C4G,IAjG2C,aAoGrDvB,qBAAU,WACR,IAAIrK,EAAQiE,GAIZ,GAHIP,KACF1D,EAAOiL,IAELjL,EAAKzI,SAAWsU,OAAOC,KAAKjB,GAAY7D,SAASzP,QAAU4T,GAC3D,GAAyB,YAArBA,GAAY9H,KAAoB,CAC9BxM,IAAgBA,GAAaiE,KAAOqQ,GAAYrQ,IAClDiJ,GAASJ,EAAW,OAGtB,IAAM0H,EAAgBR,GAAY7D,QAAQmE,GAAYrQ,IAAM,IACxD4I,GACF4H,GAA0BD,GAE1BD,GAA2BC,OAEC,aAArBF,GAAY9H,OACpBU,GAASJ,EAAW,OACrB4H,QAGL,CAACJ,GAAaI,GAAsBD,GAA2BF,GAA4BnH,GAAOP,GAAW7M,KAEhH,IAAM0Q,GAAUxQ,IAAMC,aAAY,SAACqE,GH/DT,IAACP,EGgEvBiJ,IHhEuBjJ,EGgEDO,EAAEP,GH/DnB,SAACiJ,EAAoBC,GACxB,IAAMsF,EAAcpJ,EAAYI,cAChC,OAAOgJ,EAAYyC,aAAajR,GAAIC,MAAK,WAAO,IACpCkJ,EAAUD,IAAVC,MACRqF,EAAYwB,eAAe/P,MAAK,SAACiF,GAC7B+D,EAASP,EAAcxD,OAE3B+D,EAASX,EAAgB,YAAIa,QAC9BE,OAAM,SAAAC,GAAQ,IACLH,EAAUD,IAAVC,MACRF,EAASX,EAAgB,YAAIa,KAC7BF,EAASH,EAAmB3G,EAAUmB,aAAaY,6BGqDzD+E,GAASJ,EAAWtI,IAChB8O,EAAiB3J,MAAQvD,EAAUkB,uBACrC8L,GAAc,KAGjB,CAAClG,GAAUoG,IAERzC,GAAc3Q,IAAMC,aAAY,SAACqE,GACrC0I,GH1CoB,SAAC1I,GACrB,OAAO,SAAC0I,EAAoBC,GACxB,IAAMsF,EAAcpJ,EAAYI,cAChC,OAAOgJ,EAAY1G,SAASvH,GAAGN,MAAK,WAChC,OAAOuO,EAAY3G,gBAAgB5H,MAAK,SAAC0J,GACrCV,EAASR,EAAqBkB,UAEnCN,OAAM,SAAAC,GAAQ,IACL6G,EAAejH,IAAfiH,WACRlH,EAASR,EAAqB,YAAI0H,KAClClH,EAASH,EAAmB3G,EAAUmB,aAAaY,2BGgClD4D,CAASvH,MACnB,CAAC0I,GAAUoG,IAEJ6B,GAAWjV,IAAMC,YACrBiV,oBAAS,SAAC/U,KACcA,EAAEoB,OAAO4T,aAAehV,EAAEoB,OAAO6T,WAAqC,IAAxBjV,EAAEoB,OAAO8T,cAAsBlV,EAAEoB,OAAO6T,UAAY,IAClGjB,IAAkBtB,GAAmBlG,IACvDK,GAASD,EAAa0F,MAEzB,KACL,CAACzF,GAAUyF,EAAU0B,GAAetB,EAAgBlG,KAE9C2I,GAAetV,IAAM2P,SAAQ,WACjC,OAAOgE,GAAUzI,QAAO,SAACC,EAAM8E,GAE3B,OADC9E,EAAa8E,GAAW,EAClB9E,IACR,MACF,CAACwI,KAEE4B,GAAgBvV,IAAM2P,SAAQ,WAClC,OAAOuE,GAAWhJ,QAAO,SAACC,EAAM8E,GAE5B,OADC9E,EAAa8E,EAAQlM,IAAM,EACrBoH,IACR,MACF,CAAC+I,KAEEsB,GAAcxV,IAAMC,aAAY,SAACqE,GHzHZ,IAACP,EG0H1BiJ,IH1H0BjJ,EG0HDO,EAAEP,GHzHtB,SAACiJ,EAAoBC,GAExB,OADoB9D,EAAYI,cACbkM,gBAAgB1R,GAAIC,MAAK,WACxCgJ,EAASF,EAAqB,CAACR,KAAM,UAAWvI,WACjDqJ,OAAM,SAAAC,GACLL,EAASH,EAAmB3G,EAAUmB,aAAaU,6BGqH1D,CAACiF,KAEG0I,GAAa1V,IAAMC,aAAY,SAAC0V,EAAS5R,GACzC4R,EACD7B,GAAY7D,QAAQlM,GAAI4R,SAEjB7B,GAAY7D,QAAQlM,KAE7B,IAEI6R,GAAgB5V,IAAMC,aAAY,SAACqE,GHjEd,IAACP,EGkExBiJ,IHlEwBjJ,EGkECO,EAAEP,GHjExB,SAACiJ,EAAoBC,GAExB,OADoB9D,EAAYI,cACbwC,gBAAgBhI,GAAIC,MAAK,WACxCgJ,EAASF,EAAqB,CAACR,KAAM,UAAWvI,WACjDqJ,OAAM,WACLJ,EAASH,EAAmB3G,EAAUmB,aAAaY,+BG6DxD,CAAC+E,KAEE6I,GAAU7V,IAAM2P,SAAQ,WAC5B,IAAI1G,EAAeiE,GAInB,OAHIP,KACF1D,EAAOiL,IAEFjL,EAAKrE,KAAI,SAAAC,GAAC,OAAI,cAACoN,GAAD,CAAmBtS,KAAMkF,EAAGmK,YAAa,IAAIhK,KAAQyM,WAA+BpP,IAAxBkT,GAAc1Q,EAAEd,IAAmBuN,UAA6BjP,IAAvBiT,GAAazQ,EAAEd,IACrH2N,UAAW/E,SAAqCtK,IAAxBkT,GAAc1Q,EAAEd,IACxCiN,eAAgB4E,GAAe9E,eAAgB0E,GAAahF,QAASA,GACrEG,YAAaA,GAAamF,IAAK,SAACC,GAAD,OAAOL,GAAWK,EAAGlR,EAAEd,MAHxCc,EAAEd,SAInC,CAACmJ,GAAOoI,GAAc3I,GAAWuH,GAAYqB,KAE1CS,GAAehW,IAAMC,aAAY,SAACqC,GAChCA,GAAMA,EAAGf,QAAUe,EAAGf,OAAO0U,QAC7BjJ,GAASgH,GAAgB,IACzBtB,EAAYpQ,EAAGf,OAAO0U,OACtB1D,EAAY2D,aAAa5T,EAAGf,OAAO0U,OACnCrC,GAAUtR,EAAGf,OAAO0U,UAGzB,CAACrC,GAAWrB,EAAavF,KAEtBmJ,GAAenW,IAAMC,aAAY,SAACqC,GACpC0K,GAASgH,GAAgB,IACzBJ,GAAUnB,KACX,CAACmB,GAAWnB,EAAUzF,KAEnBoJ,GAAkBpW,IAAMC,aAAY,SAACqC,GACvC,IAAKuQ,EAAgB,CACnB7F,GAASgH,GAAgB,IACzB,IAAM9O,EAAMgI,GAAMtI,KAAI,SAAAC,GAAC,OAAIA,EAAEd,MAC7BiJ,GH5JsB,SAAC9H,GAC7B,OAAO,SAAC8H,EAAoBC,GAExB,OADoB9D,EAAYI,cACbuC,iBAAiB5G,GAAKlB,MAAK,WAC1CgJ,EAASF,EAAqB,CAACR,KAAM,iBACtCc,OAAM,SAAAC,GACLL,EAASH,EAAmB3G,EAAUmB,aAAaW,0BGsJ5C8D,CAAiB5G,OAE7B,CAAC2N,EAAgB3F,GAAOF,KAErBqJ,GAAgBrW,IAAMC,aAAY,SAACqC,GAClCuQ,IACIlG,IAMHmH,GAAY7D,QAAU,GACtBjD,GAASgH,GAAgB,MANzBF,GAAY7D,QAAU,GACtBjD,GAASgH,GAAgB,IACzBhH,GAASS,KACToH,GAAUxF,KAAKiH,cAOpB,CAACzD,EAAgB3F,GAAOF,GAAUL,KAE/B4J,GAAkBvW,IAAMC,aAAY,WACxC+S,GAAiB,KAChB,IAEGwD,GAAWxW,IAAMC,aAAY,WAC5B8S,IACHG,GAAc,SAAArO,GAAC,OAAKA,KACpBmO,GAAiB,MAElB,CAACD,IAEE0D,GAAYzW,IAAM2P,SAAQ,WAC9B,OAAOzJ,EAAUiB,qBAAqBvC,KAAI,SAAAC,GAAC,OAAM,cAAC6R,EAAA,EAAD,CAAUT,MAAOpR,EAAjB,SAA6BA,GAAJA,QACzE,IAEH,OAAO,sBAAK/D,UAAU,oBAAf,UACL,cAAC6V,EAAA,EAAD,CAAYC,aAAW,SAAS9V,UAAW,cAAesQ,QAASoF,GAAnE,SACI,cAAC,IAAD,CAAUxU,SAAS,YAEvB,sBAAKlB,UAAW,iBAAoBsS,EAAiB3J,MAAQvD,EAAUkB,4BAAwC/E,IAAf4Q,EAA4BA,EAAa,yCAA2C,0CAA6C,IAAK5B,eAAgBkF,GAAtP,UACE,sBAAKzV,UAAU,kBAAf,UACE,eAAC+V,EAAA,EAAD,CACIZ,MAAOxD,EACP3R,UAAU,0BACVgW,SAAUd,GACV9V,MAAO,cAAC6W,EAAA,EAAD,CAAWC,YAAa9Q,EAAUmB,aAAae,cAAerH,MAAO,CAACkW,YAAa,UAJ9F,UAMI,cAACP,EAAA,EAAD,CAAUT,MAAM,GAAhB,SACE,6BAAK/P,EAAUmB,aAAae,kBAE7BqO,MAEH,cAAC9E,EAAA,EAAD,CACEG,QAAQ,YACRhR,UAAU,sBACVsQ,QAAS+E,GACTe,QAAS,cAAC,IAAD,IAJX,SAMGhR,EAAUmB,aAAaE,iBAGvBoF,GAQa,KAPZ,cAACgF,EAAA,EAAD,CACEG,QAAQ,YACRhR,UAAU,0BACVsQ,QAASgF,GACTc,QAAS,cAAC,IAAD,IAJX,SAMGhR,EAAUmB,aAAaG,qBAI9B,cAACmK,EAAA,EAAD,CACEG,QAAQ,YACRhR,UAAW,4BAA8B6L,GAAY,mBAAqB,IAC1EyE,QAASiF,GACTa,QAAS,cAAC,IAAD,IAJX,SAMGhR,EAAUmB,aAAaQ,iBAI9B,qBAAK/G,UAAU,yBAAyBC,MAAQ8U,GAAQrV,OAA4B,GAAnB,CAAC2W,OAAQ,QAAclC,SAAUA,GAAlG,SACKY,a,OChPEuB,OAvDf,WAAgB,IAAD,EACqBpX,IAAMiO,UAAS,GADpC,mBACNoJ,EADM,KACKC,EADL,KAEPtK,EAAW0G,cACXS,EAAgBvU,aAAY,SAACC,GAAD,OAAqBA,EAAMsU,iBACvDoD,EAAe3X,aAAY,SAACC,GAAD,OAAqBA,EAAM0X,gBAEtDC,EAAcxX,IAAMC,aAAY,WACpCqX,GAAa,GACbtK,EAASH,EAAmB,OAC3B,CAACG,IAWJ,OATAsG,qBAAU,WAENgE,KADEnD,IAAiBoD,MAKpB,CAACpD,EAAeoD,IAIjB,sBAAKzW,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,IACA,cAAC2W,EAAA,EAAD,CACIC,kBAAgB,qBAChBC,mBAAiB,2BACjB7W,UAAU,QACV4C,KAAM2T,EACNO,QAASJ,EACTK,sBAAsB,EACtBC,qBAAsB3D,EACtB4D,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,KAVf,SAaI,cAACC,EAAA,EAAD,CAAMC,GAAIf,EAAV,SAEGE,EAAe,sBAAKzW,UAAU,QAAf,UACJ,sBAAMA,UAAU,cAAhB,SAA+BoF,EAAUmB,aAAaI,cACtD,sBAAM3G,UAAU,oBAAhB,SAAqCyW,OAE9CpD,EAAgB,sBAAKrT,UAAU,QAAf,UACb,uBAAMA,UAAU,cAAhB,UAA+BoF,EAAUmB,aAAaS,QAAtD,SACA,cAACuQ,EAAA,EAAD,CAAkBzG,MAAM,iBAClB,gCC9CT0G,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxU,MAAK,YAAkD,IAA/CyU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCDRO,GAAyB,CAC3B5L,MAAO,GACPpN,aAAc,KACdqU,eAAe,EACfoD,aAAc,GACd5D,UAAW,GACXS,iBAAa/R,EACb6R,WAAY,GACZvH,WAAW,G,SCHToM,GAAQC,cDMC,WAA4E,IAAnEnZ,EAAkE,uDAAhDiZ,GAAcG,EAAkC,uCACtF,OAAOA,EAAO3M,MACV,KAAKpG,EAAUK,cAAcE,iBACzB,OAAO,6BACA5G,GADP,IAEIqN,MAAO+L,EAAO1M,QACd4H,eAAe,IAEvB,KAAKjO,EAAUK,cAAcG,mBACzB,OAAO,6BACA7G,GADP,IAEIsU,eAAe,IAEvB,KAAKjO,EAAUK,cAAcK,YACzB,OAAO,6BACA/G,GADP,IAEIC,aAAcD,EAAM8M,UAAY9M,EAAMqU,WAAWgF,MAAK,SAAArU,GAAC,OAAIA,EAAEd,KAAOkV,EAAO1M,WAAW1M,EAAMqN,MAAMgM,MAAK,SAAArU,GAAC,OAAIA,EAAEd,KAAOkV,EAAO1M,aAEpI,KAAKrG,EAAUK,cAAcC,oBACzB,OAAO,6BACA3G,GADP,IAEIsU,eAAe,IAEvB,KAAKjO,EAAUK,cAAcQ,qBACzB,OAAO,6BACAlH,GADP,IAEI0X,aAAc0B,EAAO1M,UAE7B,KAAKrG,EAAUK,cAAcM,eACzB,OAAO,6BACAhH,GADP,IAEI8T,UAAWsF,EAAO1M,UAE1B,KAAKrG,EAAUK,cAAcS,yBACzB,OAAO,6BACAnH,GADP,IAEIuU,YAAa6E,EAAO1M,UAE5B,KAAKrG,EAAUK,cAAcU,mBACzB,OAAO,6BACApH,GADP,IAEIqU,WAAY+E,EAAO1M,UAE3B,KAAKrG,EAAUK,cAAcW,iBACzB,OAAO,6BACArH,GADP,IAEI8M,UAAWsM,EAAO1M,UAE1B,QACI,OAAO1M,KCvDoBsZ,aAAgBC,OAEvDC,IAASC,OACL,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,MAEJ3Y,SAASmZ,eAAe,SAM5BjB,M","file":"static/js/main.2ab28e18.chunk.js","sourcesContent":["export enum PostType {\r\n    IMAGE, VIDEO, LINK, SELF, CONTENT_EMBED\r\n}\r\n\r\nexport function fromPostType(val: any) : PostType | null {\r\n    if (val) {\r\n        if (val.post_hint) {\r\n            const v = val.post_hint.toLowerCase();\r\n            switch(v) {\r\n                case 'image':\r\n                    return PostType.IMAGE;\r\n                case 'hosted:video':\r\n                    return PostType.VIDEO;\r\n                case 'rich:video':\r\n                    return PostType.CONTENT_EMBED;\r\n                case 'self':\r\n                    return PostType.SELF;\r\n                case 'link':\r\n                    return PostType.LINK;\r\n                default:\r\n                    return null;\r\n            }\r\n        } else if (val.selftext_html) {\r\n            return PostType.SELF;\r\n        } else if (val.is_video) {\r\n            return PostType.VIDEO;\r\n        } else if (val.secure_media && val.secure_media.oembed && val.secure_media.oembed.html) {\r\n            return PostType.CONTENT_EMBED;\r\n        }\r\n        \r\n    }\r\n    return PostType.IMAGE;\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { PostType } from '../../classes/enums/post-type';\r\nimport { AppState } from \"../../classes/interfaces/appstate\";\r\nimport { PostVideo } from '../../classes/interfaces/post';\r\nimport './PostDetail.scss';\r\n\r\ninterface PostDetailProps {\r\n}\r\nexport const PostDetail = function(props: PostDetailProps) {\r\n    const post = useSelector((state: AppState) => state.selectedPost);\r\n\r\n    const htmlDecode = React.useCallback((input: string) => {\r\n        const e = document.createElement('div');\r\n        e.innerHTML = input;\r\n        return e.childNodes.length === 0 ? \"\" : (e.childNodes[0].nodeValue || '');\r\n    }, []);\r\n    \r\n    const getPostBody = React.useCallback(() => {\r\n        if (!post) {\r\n            return null;\r\n        }\r\n        const vData = post.videoData || {} as PostVideo;\r\n        switch(post.postType) {\r\n            case PostType.IMAGE:\r\n                return <div className=\"Body-content\"><div className=\"PostPicture\" style={{backgroundImage: `url(${post.postUrl})`}}/></div>;\r\n            case PostType.VIDEO:\r\n                return <div className=\"Body-content\"><video src={vData.url} className=\"Video\" autoPlay controls/></div>;\r\n            case PostType.LINK:\r\n                return <div className=\"Body-content NotCentered\"><a href={post.postUrl} className=\"Url\" target=\"_blank\">{post.postUrl}</a></div>;\r\n            case PostType.SELF:\r\n                return <div className=\"Body-content NotCentered HtmlBody\" dangerouslySetInnerHTML={{__html: htmlDecode(post.postHtml)}}></div>;\r\n            case PostType.CONTENT_EMBED:\r\n                return <div className=\"Body-content EmbedVideo\" dangerouslySetInnerHTML={{__html: htmlDecode(post.embedContent)}}></div>;\r\n            default:\r\n                return null;\r\n        }\r\n    }, [post, htmlDecode]);\r\n    if (!post) {\r\n        return null;\r\n    }\r\n\r\n    const body = getPostBody();\r\n    return <div className=\"PostDetailContainer\">\r\n        <div className=\"AuthorContainer\"><span className=\"Author\">{post.author}</span></div>\r\n        <div className=\"InnerContainer\" style={!body ? {justifyContent: 'center'} : post.postType !== PostType.SELF ? {maxHeight: 'calc(100% - 6em)'} : {}}>\r\n            <span className=\"Title\" style={!body ? {fontSize: '2.6em'} : {}}>{post.title}</span>\r\n            {\r\n                body ? <div className=\"Body\">{body}</div> : null\r\n            }\r\n        </div>\r\n       \r\n    </div>;\r\n};","import { Post } from \"../classes/interfaces/post\";\r\n\r\nexport class PostDBService {\r\n    private static instance: PostDBService;\r\n    private dbInstance: IDBDatabase | undefined;\r\n\r\n    public constructor() {\r\n        this.dbInstance = undefined;\r\n    }\r\n\r\n    public static getInstance(): PostDBService {\r\n        if (!this.instance) {\r\n            this.instance = new PostDBService();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private initDb(ev: Event, resolveFunc: (s: IDBDatabase) => void, reject: (val: any) => void) {\r\n        const db = (ev.target as any).result as IDBDatabase;\r\n        db.createObjectStore('ReadPosts', { keyPath: 'id' });\r\n        db.createObjectStore('DismissedPosts', { keyPath: 'id' });\r\n        const objectStore = db.createObjectStore('SavedPosts', { keyPath: 'id' });\r\n        objectStore.createIndex(\"jsonData\", \"jsonData\", { unique: false });\r\n        const tx = (ev.target as any).transaction as IDBTransaction;\r\n        tx.oncomplete = () => {\r\n            this.dbInstance = db;\r\n            resolveFunc(db);\r\n        };\r\n        tx.onerror = (ev) => {\r\n            this.dbInstance = db;\r\n            reject(ev);\r\n        };\r\n    }\r\n\r\n    private getDBRef(): Promise<IDBDatabase | undefined> {\r\n        if (this.dbInstance) {\r\n            return Promise.resolve(this.dbInstance);\r\n        }\r\n        return new Promise((res, rej) => {\r\n            const dbconnect: IDBOpenDBRequest = window.indexedDB.open('devgetDemo', 1);\r\n            dbconnect.onupgradeneeded = (ev: IDBVersionChangeEvent) => {\r\n                this.initDb(ev, res, rej);\r\n            };\r\n            dbconnect.onsuccess = (ev: Event) => {\r\n                const db = (ev.target as any).result;\r\n                this.dbInstance = db;\r\n                res(this.dbInstance);\r\n            };\r\n            dbconnect.onerror = (ev: Event) => {\r\n                rej(ev);\r\n            };\r\n        });\r\n        \r\n    }\r\n\r\n    public createDB(): Promise<any> {\r\n        return this.getDBRef();\r\n    }\r\n\r\n    public saveRead(id: string): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"ReadPosts\"], \"readwrite\");\r\n    \r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore(\"ReadPosts\");\r\n                    // add our newItem object to the object store\r\n                    const objectStoreRequest = objectStore.put({id});\r\n        \r\n                    objectStoreRequest.onsuccess = function(event) {\r\n                        res('');\r\n                    };\r\n                    objectStoreRequest.onerror = (ev: Event) => {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public saveDismissed(id: string): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"DismissedPosts\"], \"readwrite\");\r\n    \r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore(\"DismissedPosts\");\r\n                    // add our newItem object to the object store\r\n                    const objectStoreRequest = objectStore.put({id: id});\r\n                    objectStoreRequest.onsuccess = function(event) {\r\n                        res('');\r\n                    };\r\n                    objectStoreRequest.onerror = (ev: Event) => {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    public savePost(p: Post): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"SavedPosts\"], \"readwrite\");\r\n    \r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore(\"SavedPosts\");\r\n                    // add our newItem object to the object store\r\n                    const objectStoreRequest = objectStore.put({id: p.id, jsonData: JSON.stringify(p)});\r\n                    objectStoreRequest.onsuccess = function(event) {\r\n                        res('');\r\n                    };\r\n                    objectStoreRequest.onerror = (ev: Event) => {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    public getSavedPosts(): Promise<Post[]> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"SavedPosts\"], \"readonly\");\r\n    \r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore(\"SavedPosts\");\r\n                    const query = objectStore.getAll();\r\n                    query.onsuccess = function(ev) {\r\n                        res(((ev.target as any).result || []).map((x: any) => {\r\n                            const result: Post = JSON.parse(x.jsonData);\r\n                            result.createdTime = new Date(result.createdTimeUtc);\r\n                            return result;\r\n                        }));\r\n                    };\r\n                    query.onerror = function(ev) {\r\n                        rej(ev);\r\n                    };\r\n                    \r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public saveDismissPosts(ids: string[]): Promise<any> {\r\n        if (!ids || !ids.length) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"DismissedPosts\"], \"readwrite\");\r\n    \r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    // create an object store on the transaction\r\n                    const objectStore = transaction.objectStore(\"DismissedPosts\");\r\n                    // add our newItem object to the object store\r\n                    const requests: IDBRequest[] = [];\r\n                    ids.forEach(id => {\r\n                        const obj = objectStore.put({id: id});\r\n                        requests.push(obj);\r\n                        obj.onsuccess = function(event) {\r\n                            let allfinished = true;\r\n                            for (const i in requests) {\r\n                                const req = requests[i];\r\n                                if (req && req.readyState === 'pending') {\r\n                                    allfinished = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (allfinished) {\r\n                                res('');\r\n                            }\r\n                        };\r\n                        obj.onerror = (ev: Event) => {\r\n                            rej(ev);\r\n                        };\r\n                    });\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    public getDismissedKeys(): Promise<string[]> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"DismissedPosts\"], \"readonly\");\r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    const objectStore = transaction.objectStore(\"DismissedPosts\");\r\n                    const query = objectStore.getAll();\r\n                    query.onsuccess = function(ev) {\r\n                        res(((ev.target as any).result || []).map((x: any) => x.id));\r\n                    };\r\n                    query.onerror = function(ev) {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    public removeSavedPost(id: string): Promise<any> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"SavedPosts\"], \"readwrite\");\r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    const objectStore = transaction.objectStore(\"SavedPosts\");\r\n                    const query = objectStore.delete(id);\r\n                    query.onsuccess = function(ev) {\r\n                        res(true);\r\n                    };\r\n                    query.onerror = function(ev) {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n    public getAllReadKeys(): Promise<string[]> {\r\n        return this.getDBRef().then(() => {\r\n            return new Promise((res, rej) => {\r\n                if (this.dbInstance) {\r\n                    const transaction = this.dbInstance.transaction([\"ReadPosts\"], \"readonly\");\r\n                    transaction.onerror = function(event) {\r\n                        rej(event);\r\n                    };\r\n                    const objectStore = transaction.objectStore(\"ReadPosts\");\r\n                    const query = objectStore.getAll();\r\n                    query.onsuccess = function(ev) {\r\n                        res(((ev.target as any).result || []).map((x: any) => x.id));\r\n                    };\r\n                    query.onerror = function(ev) {\r\n                        rej(ev);\r\n                    };\r\n                    return;\r\n                }\r\n                rej(new Error('Not created db'));\r\n            });\r\n        });\r\n    }\r\n\r\n}","export class ResponseDto<T> {\r\n    public data: T;\r\n    public success: boolean;\r\n    public message: string;\r\n    public code: number | undefined;\r\n\r\n    public constructor(data: T, success: boolean, message: string, code?: number) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.message = message;\r\n        this.code = code;\r\n    }\r\n}","export class Constants {\r\n    public static readonly REDDIT_BASE_URL = `https://www.reddit.com/top.json`;\r\n    public static readonly HTTP_TIMEOUT = 40000;\r\n    public static ERRORS = {\r\n        TIMEOUT_CODE: -1\r\n    }\r\n\r\n    public static REDUX_ACTIONS = {\r\n        FETCH_REQUEST_POSTS: 'fetch-request-posts',\r\n        UPDATE_POST_LIST: 'update-post-list',\r\n        FAIL_REQUEST_POSTS: 'fail-request-posts',\r\n\r\n        DISMISS_POST: 'dismiss-post',\r\n        SELECT_POST: 'select-post',\r\n\r\n        READ_POSTS_IDS: 'read-posts-ids',\r\n        DISMISSED_POSTS_IDS: 'dismissed-posts-ids',\r\n        UPDATE_CURRENT_ERROR: 'update-current-error',\r\n\r\n        UPDATE_DONE_DISMISS_DATA: 'update-done-dismiss-data',\r\n        UPDATE_SAVED_POSTS: 'update-saved-posts',\r\n        SHOW_SAVED_POSTS: 'show-saved-posts'\r\n    }\r\n\r\n    public static POST_LIST_PAGE_SIZES = [25, 50, 100];\r\n    public static MOBILE_WIDHT_LIMIT_PX = 1200;\r\n\r\n    public static APP_MESSAGES = {\r\n        HTTP_TIMEOUT: 'Connection timeout',\r\n        ERROR_GET_POSTS: 'Unable to get posts',\r\n        REFRESH_BUTTON: 'Refresh',\r\n        DISMISS_ALL_BUTTON: 'Dismiss All',\r\n        ERROR_TITLE: 'Error',\r\n        DISMISS_BUTTON: 'Dismiss',\r\n        SAVE_BUTTON: 'Save',\r\n        REMOVE_BUTTON: 'Remove',\r\n        SAVED_POSTS: 'Saved',\r\n        LOADING: 'Loading',\r\n        ERROR_DISMISS_POST: 'Unable to dismiss post',\r\n        ERROR_DISMISS_POSTS: 'Unable to dismiss posts',\r\n        ERROR_SAVE_READ_POST: \"Unable to save read post state\",\r\n        ERROR_GET_SAVED_POSTS: \"Unable to retrieve saved posts\",\r\n        ERROR_SAVE_POST: 'Unable to save post',\r\n        PAGE_SIZE_PLC: \"Page Size\"\r\n\r\n    }\r\n}","import { ResponseDto } from './../classes/response';\r\nimport { Constants } from './../constants';\r\n\r\n\r\nexport class PostHttpService {\r\n    private static instance: PostHttpService;\r\n    private readonly HTTP_TIMEOUT = Constants.HTTP_TIMEOUT;\r\n\r\n    public static getInstance(): PostHttpService {\r\n        if (!this.instance) {\r\n            this.instance = new PostHttpService();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public getPosts(after: string | null, limit: number): Promise<any> {\r\n        const params = [\r\n            limit > 0 ? `limit=${limit}` : null,\r\n            after ? `after=${after}` : null\r\n        ];\r\n\r\n        return Promise.race([\r\n            new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    reject(new ResponseDto<null>(null, false, Constants.APP_MESSAGES.HTTP_TIMEOUT, Constants.ERRORS.TIMEOUT_CODE));\r\n                }, this.HTTP_TIMEOUT);\r\n            }),\r\n            fetch(Constants.REDDIT_BASE_URL + '?' + params.filter(x => x !== null).join('&')).then(res => res.json())\r\n            .then(response => {\r\n                if (response && response.data && response.data.children && response.data.children.length) {\r\n                    return {\r\n                        list: response.data.children.map((x: any) => x.data),\r\n                        after: response.data.after,\r\n                        before: response.data.before\r\n                    };\r\n                }\r\n                return {};\r\n            })\r\n        ]);\r\n    }\r\n}","import { PostDBService } from './PostDBService';\r\nimport { LensTwoTone } from \"@material-ui/icons\";\r\nimport { Post, PostVideo } from \"../classes/interfaces/post\";\r\nimport { PostHttpService } from \"./PostHttpService\";\r\nimport { fromPostType } from '../classes/enums/post-type';\r\n\r\n\r\n\r\n\r\nexport class PostService {\r\n    private static instance: PostService;\r\n    private httpService: PostHttpService;\r\n    private dbService: PostDBService;\r\n    private lastAuthorId: string | null = '';\r\n\r\n    public constructor() {\r\n        this.httpService = PostHttpService.getInstance();\r\n        this.dbService = PostDBService.getInstance();\r\n        /*setTimeout(() => {\r\n            this.dbService.getDismissedKeys().then(l => console.log(l));\r\n        }, 3000);*/\r\n    }\r\n    public static getInstance(): PostService {\r\n        if (!this.instance) {\r\n            this.instance = new PostService();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private getVideoData(x: any): PostVideo | null {\r\n        if (x && x.reddit_video) {\r\n            return {\r\n                width: x.reddit_video.width,\r\n                height: x.reddit_video.height,\r\n                url: x.reddit_video.fallback_url,\r\n            };\r\n        }       \r\n        return null;\r\n    }\r\n\r\n    private isValidThumbnailUrl(val: string): boolean {\r\n        val = (val || '').toLowerCase();\r\n        return !(!val || val === 'default' || val === 'self') && (val.endsWith('.jpg') || val.endsWith('.png') || val.endsWith('.gif') || val.endsWith('.jpeg')) && val.length > 5;\r\n    }\r\n\r\n    private mapToPost(val: any): Post | null {\r\n        if (val) {\r\n            return {\r\n                author: val.author_fullname,\r\n                title: val.title,\r\n                name: val.name,\r\n                thumbnailUrl: !this.isValidThumbnailUrl(val.thumbnail) ? '' : val.thumbnail,\r\n                thumbnailDims: val.thumbnail_width && val.thumbnail_height ? {\r\n                    width: val.thumbnail_width,\r\n                    height: val.thumbnail_height\r\n                } : null,\r\n                id: val.id,\r\n                createdTimeUtc: val.created_utc * 1000,\r\n                subreddit: val.subreddit,\r\n                postType: fromPostType(val),\r\n                postHtml: val.selftext_html,\r\n                postUrl: val.url_overridden_by_dest,\r\n                createdTime: new Date(val.created_utc * 1000),\r\n                numberOfComments: val.num_comments,\r\n                embedContent: val.secure_media && val.secure_media.oembed ? val.secure_media.oembed.html : null,\r\n                videoData: val.is_video && val.media ? this.getVideoData(val.media) : null\r\n            } as Post;\r\n        }\r\n        return null;\r\n    } \r\n\r\n    private getPostsAux(limit: number, collected: Post[]): Promise<Post[]> {\r\n        return Promise.all([\r\n            this.dbService.getDismissedKeys(),\r\n            this.httpService.getPosts(this.lastAuthorId, limit)\r\n        ]).then(values => {\r\n            const list = values[1] ? values[1].list : [];\r\n            const after = values[1] ? values[1].after : '';\r\n            const diss = values[0];\r\n            const dissMap = diss.reduce((prev, curr) => {\r\n                prev[curr] = 1;\r\n                return prev;\r\n            }, {} as any);\r\n            const result = (list || []).filter((x: any) => dissMap[x.id] !== 1).map((x: any) => this.mapToPost(x));\r\n            if (result.length) {\r\n                collected = [...collected, ...result];\r\n                if (after) {\r\n                    this.lastAuthorId = after;\r\n                    localStorage.setItem('lastAuthorId', this.lastAuthorId || '');\r\n                    \r\n                    if (result.length < limit) {\r\n                        return this.getPostsAux(limit - result.length, collected);\r\n                    }\r\n                }\r\n            } else {\r\n                if (after && this.lastAuthorId !== after) {\r\n                    this.lastAuthorId = after;\r\n                    return this.getPostsAux(limit, collected);\r\n                }\r\n            }\r\n            \r\n            \r\n            return collected;\r\n        });\r\n    }\r\n\r\n    public getPosts(limit: number, reset: boolean | undefined): Promise<Post[]> {\r\n        if (reset) {\r\n            this.lastAuthorId = null;\r\n        }\r\n        return this.getPostsAux(limit, []);\r\n    }\r\n\r\n    public getReadPosts(): Promise<string[]> {\r\n        return this.dbService.getAllReadKeys();\r\n    }\r\n\r\n    public getDismissedPosts(): Promise<string[]> {\r\n        return this.dbService.getDismissedKeys();\r\n    }\r\n\r\n    public saveDismissPost(id: string): Promise<any> {\r\n        return this.dbService.saveDismissed(id);\r\n    }\r\n\r\n    public getSavedPosts(): Promise<Post[]> {\r\n        return this.dbService.getSavedPosts();\r\n    }\r\n\r\n    public savePost(p: Post): Promise<any> {\r\n        return this.dbService.savePost(p);\r\n    }\r\n\r\n    public saveDismissPosts(list: string[]): Promise<any> {\r\n        return this.dbService.saveDismissPosts(list);\r\n    }\r\n\r\n    public removeSavedPost(id: string): Promise<any> {\r\n        return this.dbService.removeSavedPost(id);\r\n    }\r\n\r\n    public saveReadPost(id: string): Promise<any> {\r\n        \r\n        return this.dbService.saveRead(id);\r\n    }\r\n\r\n    public savePageSize(n: number) {\r\n        localStorage.setItem('pageSize', n + '');\r\n    }\r\n\r\n    public getPageSize(): number | null {\r\n        const val = localStorage.getItem('pageSize');\r\n        if (val) {\r\n            return parseInt(val, 10);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public init(): Promise<any> {\r\n        return this.dbService.createDB();\r\n    }\r\n}","import { Action, Dispatch } from 'redux';\r\nimport { AppAction } from '../classes/interfaces/appaction';\r\nimport { AppState } from '../classes/interfaces/appstate';\r\nimport { DismissData } from '../classes/interfaces/dismiss-data';\r\nimport { Post } from '../classes/interfaces/post';\r\nimport { ResponseDto } from '../classes/response';\r\nimport { PostService } from '../services/PostService';\r\nimport { Constants } from './../constants';\r\n\r\n\r\nexport const fetchRequestPosts = () => ({type: Constants.REDUX_ACTIONS.FETCH_REQUEST_POSTS, payload: null} as AppAction<null>);\r\nexport const updatePostsList = (list: Post[]) => ({type: Constants.REDUX_ACTIONS.UPDATE_POST_LIST, payload: list} as AppAction<Post[]>);\r\nexport const updateSavedPostsList = (list: Post[]) => ({type: Constants.REDUX_ACTIONS.UPDATE_SAVED_POSTS, payload: list} as AppAction<Post[]>);\r\nexport const failRequestPosts = (err: Error | ResponseDto<any>) => ({type: Constants.REDUX_ACTIONS.FAIL_REQUEST_POSTS, payload: err} as AppAction<Error | ResponseDto<any>>);\r\n\r\nexport const readPostsList = (v: string[]) => ({type: Constants.REDUX_ACTIONS.READ_POSTS_IDS, payload: v} as AppAction<string[]>);\r\nexport const dismissedPostsList = (v: string[]) => ({type: Constants.REDUX_ACTIONS.DISMISSED_POSTS_IDS, payload: v} as AppAction<string[]>);\r\nexport const showSaved = (v: boolean) => ({type: Constants.REDUX_ACTIONS.SHOW_SAVED_POSTS, payload: v} as AppAction<boolean>);\r\n\r\n\r\nexport const selectPost = (v: Post) => ({type: Constants.REDUX_ACTIONS.SELECT_POST, payload: v ? v.id : null} as AppAction<string>);\r\nexport const updateCurrentError = (v: string) => ({type: Constants.REDUX_ACTIONS.UPDATE_CURRENT_ERROR, payload: v} as AppAction<string>);\r\n\r\nexport const updateDoneDimissData = (v: DismissData | undefined) => ({type: Constants.REDUX_ACTIONS.UPDATE_DONE_DISMISS_DATA, payload: v} as AppAction<DismissData | undefined>);\r\n\r\n\r\nexport const requestPosts = (limit: number, reset?: boolean) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        dispatch(fetchRequestPosts());\r\n        const { posts } = getState() as AppState;\r\n        const postService = PostService.getInstance();\r\n        return postService.getPosts(limit, reset).then((list) => {\r\n            dispatch(updatePostsList(posts.concat(list)));\r\n        }).catch((err: Error | ResponseDto<any>) => {\r\n            dispatch(failRequestPosts(err));\r\n            dispatch(updateCurrentError(err && err.message ? err.message : Constants.APP_MESSAGES.ERROR_GET_POSTS));\r\n        });\r\n    };\r\n};\r\n\r\nexport const retrieveReadPosts = () => {\r\n    return (dispatch: Dispatch) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.getReadPosts().then((list) => {\r\n            dispatch(readPostsList(list));\r\n        });\r\n    };\r\n};\r\n\r\nexport const retrieveDismissedPosts = () => {\r\n    return (dispatch: Dispatch) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.getDismissedPosts().then((list) => {\r\n            dispatch(dismissedPostsList(list));\r\n        });\r\n    };\r\n};\r\n\r\nexport const saveDismissPost = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.saveDismissPost(id).then(() => {\r\n            dispatch(updateDoneDimissData({type: 'fadeOut', id}));\r\n        }).catch(err => {\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_DISMISS_POST));\r\n        });\r\n    };\r\n};\r\n\r\nexport const saveDismissPosts = (ids: string[]) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.saveDismissPosts(ids).then(() => {\r\n            dispatch(updateDoneDimissData({type: 'slideOut'}));\r\n        }).catch(err => {\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_DISMISS_POSTS));\r\n        });\r\n    };\r\n};\r\n\r\nexport const saveReadPost = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.saveReadPost(id).then(() => {\r\n            const { posts } = getState() as AppState;\r\n            postService.getReadPosts().then((list) => {\r\n                dispatch(readPostsList(list));\r\n            });\r\n            dispatch(updatePostsList([...posts]));\r\n        }).catch(err => {\r\n            const { posts } = getState() as AppState;\r\n            dispatch(updatePostsList([...posts]));\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_SAVE_READ_POST));\r\n        });\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const loadSavedPosts = () => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.getSavedPosts().then((ps: Post[]) => {\r\n            dispatch(updateSavedPostsList(ps));\r\n        }).catch((err) => {\r\n            console.error(err);\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_GET_SAVED_POSTS));\r\n        });\r\n    };\r\n};\r\n\r\nexport const savePost = (p: Post) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.savePost(p).then(() => {\r\n            return postService.getSavedPosts().then((ps: Post[]) => {\r\n                dispatch(updateSavedPostsList(ps));\r\n            });\r\n        }).catch(err => {\r\n            const { savedPosts } = getState() as AppState;\r\n            dispatch(updateSavedPostsList([...savedPosts]));\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_SAVE_READ_POST));\r\n        });\r\n    };\r\n};\r\n\r\nexport const removeSavedPost = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppState) => {\r\n        const postService = PostService.getInstance();\r\n        return postService.removeSavedPost(id).then(() => {\r\n            dispatch(updateDoneDimissData({type: 'fadeOut', id}));\r\n        }).catch(() => {\r\n            dispatch(updateCurrentError(Constants.APP_MESSAGES.ERROR_SAVE_READ_POST));\r\n        });\r\n    };\r\n};\r\n\r\n\r\n","import { Post } from \"../../classes/interfaces/post\";\r\nimport React, { ForwardedRef, RefObject, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport moment from  'moment';\r\nimport './Post.scss';\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/CancelOutlined';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport SaveIcon from '@material-ui/icons/SaveOutlined';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { Constants } from \"../../constants\";\r\nimport Intl from 'intl';\r\nimport { AnyIfEmpty } from \"react-redux\";\r\nimport { PostType } from \"../../classes/enums/post-type\";\r\n\r\nconst DAY_TIME = 1000 * 60 * 60 * 24;\r\nconst HOUR_TIME = 1000 * 60 * 60;\r\nconst MINUTE_TIME = 1000 * 60;\r\n\r\ninterface PostProps {\r\n    post: Post;\r\n    currentDate: Date;\r\n    onPress: (p: Post) => void;\r\n    onPressSave?: (p: Post) => void;\r\n    onPressRemoved?: (p: Post) => void;\r\n    read?: boolean;\r\n    canRemove?: boolean;\r\n    saved?: boolean;\r\n    onPressDismiss: (post: Post) => void;\r\n}\r\nexport interface PostRef {\r\n    fadeOut: () => Promise<any>;\r\n    id: string;\r\n    slideOut: (delay?: number) => Promise<any>;\r\n}\r\nconst PostUIFn = function(props: PostProps, ref1: ForwardedRef<any>) {\r\n    const [pressAnimation, setPressAnimation] = useState<boolean>(false);\r\n    const [fadeOutAnimation, setDismissFadeOutAnimation] = useState<boolean>(false);\r\n    const [slideOutAnimation, setDismissSlideOutAnimation] = useState<boolean>(false);\r\n    const [hidden, setHidden] = useState<boolean>(false);\r\n    const resolveFadeOutAnim = useRef<any>(null);\r\n    const resolveSlideAnim = useRef<any>(null);\r\n    const formatCreatedAt = React.useCallback((dt: Date) => {\r\n        const now = props.currentDate;\r\n        if (now && dt) {\r\n            const diff = now.getTime() + now.getTimezoneOffset() * 1000 * 60 - dt.getTime();\r\n            const days = Math.floor(diff / DAY_TIME);\r\n            const minutes = Math.floor(diff / MINUTE_TIME);\r\n            const hours = Math.floor(diff / HOUR_TIME);\r\n            if (diff > 0) {\r\n                if (diff < MINUTE_TIME) {\r\n                    return `Seconds ago`;\r\n                } else if (diff < HOUR_TIME) {\r\n                    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n                } else if (diff < DAY_TIME) {\r\n                    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n                } else if (diff < 5 * DAY_TIME) {\r\n                    const hoursDiff = Math.floor((diff % DAY_TIME) / HOUR_TIME);\r\n                    if (hoursDiff > 0) {\r\n                        return `${days} day${days > 1 ? 's' : ''}, ${hoursDiff} hour${hoursDiff > 1 ? 's' : ''} ago`;\r\n                    } else {\r\n                        return `${days} day${days > 1 ? 's' : ''} ago`;\r\n                    }\r\n                    \r\n                } else {\r\n                    return `${days} day${days > 1 ? 's' : ''} ago`;\r\n                }\r\n            }\r\n            \r\n        }\r\n        return '';\r\n    }, [props.currentDate]);\r\n\r\n    const p = props.post;\r\n    const dismissButtonStyle = React.useMemo(() => ({paddingTop: '1px', paddingBottom: '1px', fontSize: '12px', marginRight: '5px'}), []);\r\n    useImperativeHandle(ref1, () => ({\r\n        fadeOut: () => {\r\n            if (resolveFadeOutAnim.current) {\r\n                return Promise.reject('Animating');\r\n            }\r\n\r\n            setDismissFadeOutAnimation(true);\r\n            return new Promise(res => {\r\n                resolveFadeOutAnim.current = res;\r\n            });\r\n        },\r\n        slideOut: (delay?: number) => {\r\n            if (resolveSlideAnim.current) {\r\n                return Promise.reject('Animating');\r\n            }\r\n            if (!delay) {\r\n                setDismissSlideOutAnimation(true);\r\n            }\r\n            return new Promise(res => {\r\n                resolveSlideAnim.current = res;\r\n                if (delay) {\r\n                    setTimeout(() => {\r\n                        setDismissSlideOutAnimation(true);\r\n                    }, delay);\r\n                }\r\n            });\r\n        },\r\n        id: p.id\r\n    }), [p]);\r\n\r\n    const formatter = React.useMemo(() => {\r\n        return new Intl.NumberFormat(\"en-IR\");\r\n    }, []);\r\n\r\n    \r\n    const pressPost = React.useCallback((e) => {\r\n        setPressAnimation(true);\r\n        props.onPress && props.onPress(p);\r\n    }, [props.onPress, p]);\r\n\r\n    const pressSave = React.useCallback((e: any) => {\r\n        e.stopPropagation();\r\n        props.onPressSave && props.onPressSave(p);\r\n    }, [props.onPressSave, p]);\r\n\r\n    \r\n    const animEnds = React.useCallback((e) => {\r\n        setPressAnimation(false);\r\n        if (fadeOutAnimation && resolveFadeOutAnim.current) {\r\n            resolveFadeOutAnim.current(true);\r\n        } else if (slideOutAnimation && resolveSlideAnim.current) {\r\n            setHidden(true);\r\n            resolveSlideAnim.current(true);\r\n        }\r\n        resolveSlideAnim.current = null;\r\n        resolveFadeOutAnim.current = null;\r\n        setDismissSlideOutAnimation(false);\r\n        setDismissFadeOutAnimation(false);\r\n    }, [p, fadeOutAnimation, slideOutAnimation]);\r\n\r\n    const pressDismiss = React.useCallback((e: any) => {\r\n        e.stopPropagation();\r\n        props.onPressDismiss && props.onPressDismiss(p);\r\n    }, [props.onPressDismiss, p]);\r\n\r\n    const pressRemoved = React.useCallback((e: any) => {\r\n        e.stopPropagation();\r\n        props.onPressRemoved && props.onPressRemoved(p);\r\n    }, [props.onPressRemoved, p]);\r\n\r\n    const animationClassStr = React.useMemo(() => {\r\n        if (pressAnimation) {\r\n            return' animate__animated animate__headShake';\r\n        } else if (fadeOutAnimation) {\r\n            return ' animate__animated animate__fadeOut';\r\n        } else if (slideOutAnimation) {\r\n            return ' animate__animated animate__slideOutLeft';\r\n        } else {\r\n            return '';\r\n        }\r\n    }, [slideOutAnimation, fadeOutAnimation, pressAnimation]);\r\n\r\n    const openFullSizeImage = React.useCallback((e) => {\r\n        if (p.postType === PostType.IMAGE) {\r\n            e.stopPropagation();\r\n            window.open(p.postUrl, '_blank');\r\n        }\r\n    }, [p]);\r\n\r\n    if (!props.post) {\r\n        return null;\r\n    }\r\n\r\n    return <div className={'PostContainer ' + animationClassStr} style={hidden ? {visibility: 'hidden'} : {}} onClick={pressPost} onAnimationEnd={animEnds}>\r\n        <div className=\"Header\">\r\n            <div className=\"Header-left\">\r\n                {!props.read ? <Icon className=\"ReadIcon\">fiber_manual_record</Icon> : null}\r\n                <span className=\"Author\" style={props.read ? {left: 0} : null}>{p.author}</span>\r\n            </div>     \r\n            <div className=\"Header-right\">\r\n                {props.saved ? <Icon className=\"SavedIcon\">save</Icon> : null}\r\n                <span className=\"CreatedAt\">{formatCreatedAt(p.createdTime)}</span>\r\n            </div>        \r\n            \r\n        </div>\r\n        <div className=\"Body\">\r\n            {p.thumbnailUrl ? <img src={p.thumbnailUrl} width={100} height={100} onClick={openFullSizeImage} className={'Thumbnail ' + (p.postType === PostType.IMAGE ? 'Clickable' : '') } /> : null}\r\n            <span className=\"Title\">{p.title}</span>\r\n        </div>\r\n        <div className=\"Footer\">\r\n            <div className=\"PostOptions\">\r\n                {\r\n                    !props.saved ? \r\n                    <>\r\n                        <Button onClick={pressDismiss} color=\"default\" size={'small'} style={dismissButtonStyle} variant=\"contained\" className=\"DismissButton\" startIcon={<DeleteIcon />}>{Constants.APP_MESSAGES.DISMISS_BUTTON}</Button>\r\n                        <Button onClick={pressSave} color=\"default\" size={'small'} style={dismissButtonStyle} variant=\"contained\" className=\"SaveButton\" startIcon={<SaveIcon />}>{Constants.APP_MESSAGES.SAVE_BUTTON}</Button>\r\n                    </> : \r\n                    <>\r\n                        {props.canRemove ? <Button onClick={pressRemoved} color=\"default\" size={'small'} style={dismissButtonStyle} variant=\"contained\" className=\"RemoveButton\" startIcon={<DeleteOutlineIcon />}>{Constants.APP_MESSAGES.REMOVE_BUTTON}</Button> : \r\n                            <Button onClick={pressDismiss} color=\"default\" size={'small'} style={dismissButtonStyle} variant=\"contained\" className=\"DismissButton\" startIcon={<DeleteIcon />}>{Constants.APP_MESSAGES.DISMISS_BUTTON}</Button>\r\n                        }\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n            \r\n            <span className=\"CommentsNum\">{p.numberOfComments > 0 ? formatter.format(p.numberOfComments) + ' comment/s' : 'No comments'}</span>\r\n        </div>\r\n    </div>;\r\n};\r\nexport const PostUI = React.forwardRef(PostUIFn);","export class Util {\r\n    public static getWindowDimensions() {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return {\r\n            width,\r\n            height\r\n        };\r\n    }\r\n}","import { Button, IconButton, InputBase, MenuItem, Select } from '@material-ui/core';\r\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\r\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { debounce } from 'lodash';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../classes/interfaces/appstate\";\r\nimport { Post } from \"../../classes/interfaces/post\";\r\nimport { PostService } from \"../../services/PostService\";\r\nimport { loadSavedPosts, removeSavedPost, requestPosts, retrieveDismissedPosts, retrieveReadPosts, saveDismissPost, saveDismissPosts, savePost, saveReadPost, selectPost, updateDoneDimissData, updatePostsList, updateSavedPostsList, showSaved as showSavedAction } from \"../../state/actions\";\r\nimport { PostRef, PostUI } from \"../post/PostUI\";\r\nimport { Util } from '../util';\r\nimport { Constants } from '../../constants';\r\nimport './PostList.scss';\r\n\r\ninterface PostListProps {\r\n}\r\nexport const PostList = function(props: PostListProps) {\r\n\r\n  const postService = React.useMemo(() => {\r\n    return PostService.getInstance();\r\n  }, []);\r\n  \r\n  const [pageSize, setPageSize] = useState<number>(postService.getPageSize() || Constants.POST_LIST_PAGE_SIZES[0]);\r\n  const [ready, setReady] = useState<boolean>(false);\r\n  const [slideAnimating, setSlideAnimating] = useState<boolean>(false);\r\n  const [menuAnimating, setMenuAnimating] = useState<boolean>(false);\r\n  const [menuOpened, setMenuOpened] = useState<boolean | undefined>(undefined);\r\n  const [windowDimensions, setWindowDimensions] = useState(Util.getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    setMenuOpened(true);\r\n    function handleResize() {\r\n      setMenuOpened(undefined);\r\n      setWindowDimensions(Util.getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  const postsRead = useSelector((state: AppState) => state.postsRead);\r\n  const selectedPost = useSelector((state: AppState) => state.selectedPost);\r\n  const showSaved = useSelector((state: AppState) => state.showSaved);\r\n  const initFetch = React.useCallback((oSize: number) => {\r\n    postRefsMap.current = {};\r\n    dispatch(updatePostsList([]));\r\n    dispatch(requestPosts(oSize, true));\r\n    dispatch(retrieveReadPosts());\r\n    dispatch(retrieveDismissedPosts()); \r\n    dispatch(loadSavedPosts());\r\n    dispatch(showSavedAction(false)); \r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!ready) {\r\n      postService.init().then(() => {\r\n          setReady(true);\r\n          initFetch(pageSize);\r\n      }).catch(() => {\r\n          setReady(true);\r\n          initFetch(pageSize);\r\n      });\r\n    }\r\n  }, [postService, dispatch]); \r\n   \r\n    \r\n  const posts = useSelector((state: AppState) => state.posts);\r\n  const savedPosts = useSelector((state: AppState) => state.savedPosts);\r\n  const fetchingPosts = useSelector((state: AppState) => state.fetchingPosts);\r\n  const dismissData = useSelector((state: AppState) => state.dismissData);\r\n  const postRefsMap = useRef<{[key: string]: PostRef}>({});\r\n\r\n  const runDismissFadeOutAnimation = React.useCallback((postToDismiss: PostRef | undefined) => {\r\n    if (postToDismiss) {\r\n      postToDismiss.fadeOut().then(() => {\r\n        dispatch(updatePostsList(posts.filter(x => x.id !== postToDismiss.id)));\r\n        dispatch(updateDoneDimissData(undefined));\r\n        delete postRefsMap.current[postToDismiss.id];\r\n      }).catch(() => {});\r\n    }\r\n  }, [posts, dispatch]);\r\n\r\n  const runRemoveFadeOutAnimation = React.useCallback((postToDismiss: PostRef | undefined) => {\r\n    if (postToDismiss) {\r\n      postToDismiss.fadeOut().then(() => {\r\n        dispatch(updateSavedPostsList(savedPosts.filter(x => x.id !== postToDismiss.id)));\r\n        dispatch(updateDoneDimissData(undefined));\r\n        delete postRefsMap.current[postToDismiss.id];\r\n      }).catch(() => {});\r\n    }\r\n  }, [savedPosts, dispatch]);\r\n\r\n  const runSlideOutAnimation =React.useCallback(() => {\r\n      let to = 0;\r\n      const promises: Promise<any>[] = [];\r\n      setSlideAnimating(true);\r\n      posts.forEach((x, i) => {\r\n        const postRef = postRefsMap.current[x.id];\r\n        to = Math.min(600, i * 25);\r\n        promises.push(postRef.slideOut(to));\r\n      });\r\n\r\n      Promise.all(promises).then(() => {\r\n        dispatch(updateDoneDimissData(undefined));\r\n        dispatch(updatePostsList([]));\r\n        postRefsMap.current = {};\r\n        setSlideAnimating(false);\r\n      }).catch(() => {\r\n        setSlideAnimating(false);\r\n      });\r\n  }, [posts, dispatch]);\r\n  const [_, setRandom] = useState<number>(0);\r\n\r\n\r\n  useEffect(() => {\r\n    let list =  posts;\r\n    if (showSaved) {\r\n      list = savedPosts;\r\n    }\r\n    if (list.length === Object.keys(postRefsMap.current).length && dismissData) {\r\n        if (dismissData.type === 'fadeOut') {\r\n          if (selectedPost && selectedPost.id === dismissData.id) {\r\n            dispatch(selectPost(null));\r\n          }\r\n          \r\n          const postToDismiss = postRefsMap.current[dismissData.id || ''];\r\n          if (showSaved) {\r\n            runRemoveFadeOutAnimation(postToDismiss);\r\n          } else {\r\n            runDismissFadeOutAnimation(postToDismiss);\r\n          }\r\n        } else if (dismissData.type === 'slideOut') {\r\n           dispatch(selectPost(null));\r\n          runSlideOutAnimation();\r\n        }\r\n    }\r\n  }, [dismissData, runSlideOutAnimation, runRemoveFadeOutAnimation, runDismissFadeOutAnimation, posts, showSaved, selectedPost]);\r\n\r\n  const onPress = React.useCallback((p: Post) => {\r\n      dispatch(saveReadPost(p.id));\r\n      dispatch(selectPost(p));\r\n      if (windowDimensions.width < Constants.MOBILE_WIDHT_LIMIT_PX) {\r\n        setMenuOpened(false);\r\n      }\r\n      \r\n  }, [dispatch, windowDimensions]);\r\n\r\n  const onPressSave = React.useCallback((p: Post) => {\r\n    dispatch(savePost(p));    \r\n}, [dispatch, windowDimensions]);\r\n\r\n    const onScroll = React.useCallback(\r\n      debounce((e: any) => {\r\n        const bottomReached = e.target.scrollHeight - e.target.scrollTop <= e.target.clientHeight * 1.1 && e.target.scrollTop > 0;\r\n        if (bottomReached && !fetchingPosts && !slideAnimating && !showSaved) {\r\n            dispatch(requestPosts(pageSize));\r\n        }\r\n      }, 350), \r\n    [dispatch, pageSize, fetchingPosts, slideAnimating, showSaved]);\r\n\r\n    const postsReadMap = React.useMemo(() => {\r\n      return postsRead.reduce((prev, current: string) => {\r\n          (prev as any)[current] = 1;\r\n          return prev;\r\n      }, {} as {[key: string]: string});\r\n    }, [postsRead]);\r\n\r\n    const postsSavedMap = React.useMemo(() => {\r\n      return savedPosts.reduce((prev, current: Post) => {\r\n          (prev as any)[current.id] = 1;\r\n          return prev;\r\n      }, {} as {[key: string]: string});\r\n    }, [savedPosts]);\r\n\r\n    const onDismissed = React.useCallback((p: Post) => {\r\n      dispatch(saveDismissPost(p.id));\r\n  }, [dispatch]);\r\n\r\n   const setPostRef = React.useCallback((rs: any, id: string) => {\r\n     if (rs) {\r\n        postRefsMap.current[id]=rs;\r\n     } else {\r\n        delete postRefsMap.current[id];\r\n     }\r\n   }, []);\r\n\r\n    const onRemoveSaved = React.useCallback((p: Post) => {\r\n        dispatch(removeSavedPost(p.id));\r\n    }, [dispatch]);\r\n  \r\n    const postsEl = React.useMemo(() => {\r\n      let list: Post[] = posts;\r\n      if (showSaved) {\r\n        list = savedPosts;\r\n      }\r\n      return list.map(x => <PostUI key={x.id} post={x} currentDate={new Date()} saved={postsSavedMap[x.id] !== undefined} read={postsReadMap[x.id] !== undefined} \r\n                          canRemove={showSaved && postsSavedMap[x.id] !== undefined}\r\n                          onPressRemoved={onRemoveSaved} onPressDismiss={onDismissed} onPress={onPress} \r\n                          onPressSave={onPressSave} ref={(r) => setPostRef(r, x.id)}></PostUI>);\r\n    }, [posts, postsReadMap, showSaved, savedPosts, postsSavedMap]);\r\n\r\n    const handleChange = React.useCallback((ev: any) => {\r\n        if (ev && ev.target && ev.target.value) {\r\n            dispatch(showSavedAction(false));\r\n            setPageSize(ev.target.value);\r\n            postService.savePageSize(ev.target.value);\r\n            initFetch(ev.target.value);\r\n         }\r\n        \r\n    }, [initFetch, postService, dispatch]);\r\n\r\n    const refreshPress = React.useCallback((ev: any) => {\r\n        dispatch(showSavedAction(false));\r\n        initFetch(pageSize);\r\n    }, [initFetch, pageSize, dispatch]);\r\n\r\n    const dismissAllPress = React.useCallback((ev: any) => {\r\n        if (!slideAnimating) {\r\n          dispatch(showSavedAction(false));\r\n          const ids = posts.map(x => x.id);\r\n          dispatch(saveDismissPosts(ids));\r\n        }\r\n    }, [slideAnimating, posts, dispatch]);\r\n\r\n    const showSavedPress= React.useCallback((ev: any) => {\r\n      if (!slideAnimating) {\r\n          if (!showSaved) {\r\n            postRefsMap.current = {};\r\n            dispatch(showSavedAction(true));\r\n            dispatch(loadSavedPosts());\r\n            setRandom(Math.random());\r\n          } else {\r\n            postRefsMap.current = {};\r\n            dispatch(showSavedAction(false));\r\n          }\r\n          \r\n        }\r\n    }, [slideAnimating, posts, dispatch, showSaved]);\r\n\r\n    const onAnimSliderEnd = React.useCallback(() => {\r\n      setMenuAnimating(false);\r\n    }, []);\r\n\r\n    const openMenu = React.useCallback(() => {\r\n      if (!menuAnimating) {\r\n        setMenuOpened(x => !x);\r\n        setMenuAnimating(true);\r\n      }\r\n    }, [menuAnimating]);\r\n\r\n    const pageSizes = React.useMemo(() => {\r\n      return Constants.POST_LIST_PAGE_SIZES.map(x => ( <MenuItem value={x} key={x}>{x}</MenuItem>));\r\n    }, []);\r\n\r\n    return <div className=\"PostListContainer\">\r\n      <IconButton aria-label=\"delete\" className={'MenuButton '} onClick={openMenu}>\r\n          <MenuIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <div className={'PostListBody ' +  (windowDimensions.width < Constants.MOBILE_WIDHT_LIMIT_PX && menuOpened !== undefined ? (menuOpened ? 'animate__animated animate__slideInLeft' : 'animate__animated animate__slideOutLeft') : '')} onAnimationEnd={onAnimSliderEnd}>\r\n        <div className=\"PostListOptions\">\r\n          <Select\r\n              value={pageSize}\r\n              className=\"Option PageSizeDropdown\"\r\n              onChange={handleChange}\r\n              input={<InputBase placeholder={Constants.APP_MESSAGES.PAGE_SIZE_PLC} style={{paddingLeft: '12px'}}/>}\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>{Constants.APP_MESSAGES.PAGE_SIZE_PLC}</em>\r\n              </MenuItem>\r\n              {pageSizes}\r\n            </Select>\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"Option ReloadButton\"\r\n              onClick={refreshPress}\r\n              endIcon={<RefreshIcon />}\r\n            >\r\n              {Constants.APP_MESSAGES.REFRESH_BUTTON}\r\n            </Button> \r\n            {\r\n              !showSaved ? \r\n                <Button\r\n                  variant=\"contained\"\r\n                  className=\"Option DismissAllButton\"\r\n                  onClick={dismissAllPress}\r\n                  endIcon={<ClearAllIcon />}\r\n                >\r\n                  {Constants.APP_MESSAGES.DISMISS_ALL_BUTTON}\r\n                </Button> : null\r\n            }\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              className={'Option SavedPostsButton ' + (showSaved ? 'SavedButtonFocus' : '')}\r\n              onClick={showSavedPress}\r\n              endIcon={<SaveOutlinedIcon />}\r\n            >\r\n              {Constants.APP_MESSAGES.SAVED_POSTS}\r\n            </Button>\r\n\r\n        </div>\r\n        <div className=\"PostListInnerContainer\" style={!postsEl.length ? {border: 'none'} : {}} onScroll={onScroll}>\r\n            {postsEl}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    ;\r\n};","import { Backdrop, CircularProgress, Fade, Modal } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport { AppState } from './classes/interfaces/appstate';\nimport { PostDetail } from './components/post-detail/PostDetail';\nimport { PostList } from './components/post-list/PostList';\nimport { Constants } from './constants';\nimport { PostService } from './services/PostService';\nimport { updateCurrentError } from './state/actions';\nimport 'intl/locale-data/jsonp/en-US';\n\nfunction App() {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const fetchingPosts = useSelector((state: AppState) => state.fetchingPosts);\n  const currentError = useSelector((state: AppState) => state.currentError);\n\n  const handleClose = React.useCallback(() => {\n    setModalOpen(false);\n    dispatch(updateCurrentError(''));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (fetchingPosts || currentError) {\n      setModalOpen(true);\n    } else {\n      setModalOpen(false);\n    }\n  }, [fetchingPosts, currentError]);\n\n\n  return (\n    <div className=\"App\">\n      <PostList />\n      <PostDetail />\n      <Modal\n          aria-labelledby=\"spring-modal-title\"\n          aria-describedby=\"spring-modal-description\"\n          className=\"Modal\"\n          open={modalOpen}\n          onClose={handleClose}\n          closeAfterTransition={true}\n          disableBackdropClick={fetchingPosts}\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 500,\n          }}\n        >\n          <Fade in={modalOpen}>\n            {\n             currentError ? <div className=\"Paper\">\n                        <span className=\"Modal-title\">{Constants.APP_MESSAGES.ERROR_TITLE}</span>\n                        <span className=\"Modal-description\">{currentError}</span>\n                      </div>\n             : fetchingPosts ? <div className=\"Paper\">\n                  <span className=\"Modal-title\">{Constants.APP_MESSAGES.LOADING}...</span>\n                  <CircularProgress color=\"secondary\" /> \n               </div> : <div></div>\n            }\n            \n          </Fade>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { showSaved } from './actions';\r\nimport { Constants } from '../constants';\r\nimport { Action } from \"redux\";\r\nimport { AppState } from \"../classes/interfaces/appstate\";\r\nimport { AppAction } from '../classes/interfaces/appaction';\r\n\r\nconst initialState: AppState = {\r\n    posts: [],\r\n    selectedPost: null,\r\n    fetchingPosts: false,\r\n    currentError: '',\r\n    postsRead: [],\r\n    dismissData: undefined,\r\n    savedPosts: [],\r\n    showSaved: false\r\n};\r\n\r\nexport default function(state: AppState = initialState, action: AppAction<any>): AppState {\r\n    switch(action.type) {\r\n        case Constants.REDUX_ACTIONS.UPDATE_POST_LIST:\r\n            return {\r\n                ...state,\r\n                posts: action.payload,\r\n                fetchingPosts: false\r\n            };\r\n        case Constants.REDUX_ACTIONS.FAIL_REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                fetchingPosts: false\r\n            };\r\n        case Constants.REDUX_ACTIONS.SELECT_POST:\r\n            return {\r\n                ...state,\r\n                selectedPost: state.showSaved ? state.savedPosts.find(x => x.id === action.payload) : state.posts.find(x => x.id === action.payload)\r\n            };\r\n        case Constants.REDUX_ACTIONS.FETCH_REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                fetchingPosts: true\r\n            };\r\n        case Constants.REDUX_ACTIONS.UPDATE_CURRENT_ERROR:\r\n            return {\r\n                ...state,\r\n                currentError: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.READ_POSTS_IDS:\r\n            return {\r\n                ...state,\r\n                postsRead: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.UPDATE_DONE_DISMISS_DATA:\r\n            return {\r\n                ...state,\r\n                dismissData: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.UPDATE_SAVED_POSTS:\r\n            return {\r\n                ...state,\r\n                savedPosts: action.payload\r\n            };\r\n        case Constants.REDUX_ACTIONS.SHOW_SAVED_POSTS:\r\n            return {\r\n                ...state,\r\n                showSaved: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport rootReducer from './state/rootReducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}